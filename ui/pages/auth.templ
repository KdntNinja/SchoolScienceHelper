package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ Auth() {
	@layouts.BaseLayout() {
		<main class="flex items-center justify-center min-h-[calc(100vh-72px)] bg-background px-4 py-12">
			<div class="bg-card dark:bg-card rounded-lg shadow-xl w-full max-w-md p-8 border border-border">
				<h2 class="text-3xl font-bold text-center mb-6 text-primary">Welcome</h2>
				<div id="tab-switch" class="flex justify-center gap-6 mb-6">
					<button id="login-tab" class="pb-1 font-medium text-primary border-b-2 border-primary bg-transparent" aria-selected="true" tabindex="0">
						Login
					</button>
					<button id="signup-tab" class="pb-1 font-medium text-muted-foreground hover:text-primary bg-transparent" aria-selected="false" tabindex="0">
						Sign Up
					</button>
				</div>
				<!-- Login Form -->
				<div id="login-form">
					<form id="login-form-element" class="flex flex-col gap-4" autocomplete="on">
						<div id="login-error" class="hidden text-destructive text-sm" role="alert" aria-live="polite"></div>
						<label for="login-email" class="sr-only">Email</label>
						<input
							id="login-email"
							name="email"
							type="email"
							placeholder="Email"
							required
							autofocus
							class="w-full border border-input rounded-md px-4 py-2 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
						/>
						<label for="login-password" class="sr-only">Password</label>
						<div class="relative">
							<input
								id="login-password"
								name="password"
								type="password"
								placeholder="Password"
								required
								class="w-full border border-input rounded-md px-4 py-2 pr-10 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
							/>
							<button type="button" id="login-show-password" tabindex="-1" class="absolute right-2 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-primary text-sm">Show</button>
						</div>
						<div class="flex justify-between items-center">
							<a href="/forgot-password" class="text-xs text-primary hover:underline">Forgot Password?</a>
						</div>
						<div class="w-full">
							@button.Button(button.Props{Variant: "default", Type: "submit", Class: "w-full", ID: "login-submit-btn"}) {
								Log In
							}
						</div>
					</form>
				</div>
				<!-- Sign Up Form -->
				<div id="signup-form" class="hidden">
					<form id="signup-form-element" class="flex flex-col gap-4" autocomplete="on">
						<div id="signup-error" class="hidden text-destructive text-sm" role="alert" aria-live="polite"></div>
						<label for="signup-username" class="sr-only">Username</label>
						<input
							id="signup-username"
							name="username"
							type="text"
							placeholder="Username"
							required
							autofocus
							class="w-full border border-input rounded-md px-4 py-2 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
						/>
						<label for="signup-email" class="sr-only">Email</label>
						<input
							id="signup-email"
							name="email"
							type="email"
							placeholder="Email"
							required
							class="w-full border border-input rounded-md px-4 py-2 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
						/>
						<label for="signup-password" class="sr-only">Password</label>
						<div class="relative">
							<input
								id="signup-password"
								name="password"
								type="password"
								placeholder="Password"
								required
								class="w-full border border-input rounded-md px-4 py-2 pr-10 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
							/>
							<button type="button" id="signup-show-password" tabindex="-1" class="absolute right-2 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-primary text-sm">Show</button>
						</div>
						<div id="password-strength" class="text-xs text-muted-foreground"></div>
						<label for="signup-confirm-password" class="sr-only">Confirm Password</label>
						<div class="relative">
							<input
								id="signup-confirm-password"
								name="confirmPassword"
								type="password"
								placeholder="Confirm Password"
								required
								class="w-full border border-input rounded-md px-4 py-2 pr-10 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
							/>
							<button type="button" id="signup-show-confirm-password" tabindex="-1" class="absolute right-2 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-primary text-sm">Show</button>
						</div>
						<div class="flex items-center gap-2 text-xs">
							<input id="agree-tos" name="agreeTos" type="checkbox" required class="accent-primary" />
							<label for="agree-tos" class="select-none">
								I agree to the
								<button type="button" onclick="openLegalModal('terms')" class="text-primary hover:underline focus:outline-none focus:underline">Terms & Conditions</button>
								and
								<button type="button" onclick="openLegalModal('privacy')" class="text-primary hover:underline focus:outline-none focus:underline">Privacy Policy</button>
							</label>
						</div>
						<div class="w-full">
							@button.Button(button.Props{Variant: "primary", Type: "submit", Class: "w-full", ID: "signup-submit-btn"}) {
								Sign Up
							}
						</div>
					</form>
				</div>
			</div>
		</main>
		<div id="global-loading" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30 hidden">
			<div class="animate-spin rounded-full h-12 w-12 border-t-4 border-primary border-solid"></div>
		</div>
		<!-- Legal Modal -->
		<div id="legal-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden">
			<div class="bg-card rounded-lg shadow-xl max-w-2xl w-full p-6 relative">
				<button onclick="closeLegalModal()" class="absolute top-2 right-2 text-lg text-muted-foreground hover:text-primary">&times;</button>
				<div id="legal-modal-content" class="overflow-y-auto max-h-[70vh] text-left"></div>
			</div>
		</div>
		<script>
			const loginTab = document.getElementById('login-tab');
			const signupTab = document.getElementById('signup-tab');
			const loginForm = document.getElementById('login-form');
			const signupForm = document.getElementById('signup-form');

			loginTab.onclick = () => {
				loginTab.classList.add('text-primary', 'border-primary');
				signupTab.classList.remove('text-primary', 'border-primary');
				signupTab.classList.add('text-muted-foreground');
				loginForm.classList.remove('hidden');
				signupForm.classList.add('hidden');
			};

			signupTab.onclick = () => {
				signupTab.classList.add('text-primary', 'border-primary');
				loginTab.classList.remove('text-primary', 'border-primary');
				loginTab.classList.add('text-muted-foreground');
				signupForm.classList.remove('hidden');
				loginForm.classList.add('hidden');
			};

			const loginFormEl = document.getElementById('login-form-element');
			const signupFormEl = document.getElementById('signup-form-element');
			const loginErrorEl = document.getElementById('login-error');
			const signupErrorEl = document.getElementById('signup-error');

			// Show/hide password toggles
			function setupShowPassword(inputId, btnId, altInputId = null) {
				const input = document.getElementById(inputId);
				const btn = document.getElementById(btnId);
				const altInput = altInputId ? document.getElementById(altInputId) : null;
				if (!input || !btn) return;
				btn.onclick = () => {
					const isPassword = input.type === 'password';
					input.type = isPassword ? 'text' : 'password';
					if (altInput) altInput.type = isPassword ? 'text' : 'password';
					btn.textContent = isPassword ? 'Hide' : 'Show';
					if (altInput && altInputId) {
						const altBtn = document.getElementById(altInputId.replace('input', 'show-password'));
						if (altBtn) altBtn.textContent = isPassword ? 'Hide' : 'Show';
					}
				};
			}
			setupShowPassword('login-password', 'login-show-password');
			setupShowPassword('signup-password', 'signup-show-password', 'signup-confirm-password');
			setupShowPassword('signup-confirm-password', 'signup-show-confirm-password', 'signup-password');

			// Password strength feedback
			const signupPassword = document.getElementById('signup-password');
			const passwordStrength = document.getElementById('password-strength');
			if (signupPassword && passwordStrength) {
				signupPassword.addEventListener('input', () => {
					const val = signupPassword.value;
					let strength = '';
					if (val.length < 6) strength = 'Too short';
					else if (!/[A-Z]/.test(val)) strength = 'Add an uppercase letter';
					else if (!/[0-9]/.test(val)) strength = 'Add a number';
					else if (!/[^A-Za-z0-9]/.test(val)) strength = 'Add a special character';
					else strength = 'Strong password';
					passwordStrength.textContent = strength;
					passwordStrength.className = 'text-xs ' + (strength === 'Strong password' ? 'text-green-600' : 'text-destructive');
				});
			}

			// Loading indicators for submit buttons
			function setLoading(btnId, loading) {
				const btn = document.getElementById(btnId);
				if (!btn) return;
				btn.disabled = loading;
				btn.textContent = loading ? 'Loading...' : btnId.includes('login') ? 'Log In' : 'Sign Up';
			}

			// Show/hide global loading spinner
			function showGlobalLoading(show) {
				const spinner = document.getElementById('global-loading');
				if (!spinner) return;
				if (show) spinner.classList.remove('hidden');
				else spinner.classList.add('hidden');
			}

			loginFormEl.onsubmit = async (e) => {
				e.preventDefault();
				loginErrorEl.classList.add('hidden');
				setLoading('login-submit-btn', true);
				showGlobalLoading(true);
				const formData = new FormData(loginFormEl);
				const res = await fetch('/login', {
					method: 'POST',
					body: formData,
				});
				const text = await res.text();
				setLoading('login-submit-btn', false);
				showGlobalLoading(false);
				if (!res.ok) {
					loginErrorEl.textContent = text;
					loginErrorEl.classList.remove('hidden');
				} else {
					window.location.href = '/dash';
				}
			};

			signupFormEl.onsubmit = async (e) => {
				e.preventDefault();
				signupErrorEl.classList.add('hidden');
				setLoading('signup-submit-btn', true);
				showGlobalLoading(true);
				const formData = new FormData(signupFormEl);
				const res = await fetch('/signup', {
					method: 'POST',
					body: formData,
				});
				const text = await res.text();
				setLoading('signup-submit-btn', false);
				showGlobalLoading(false);
				if (!res.ok) {
					signupErrorEl.textContent = text;
					signupErrorEl.classList.remove('hidden');
				} else {
					window.location.href = '/dash';
				}
			};

			async function openLegalModal(type) {
				const modal = document.getElementById('legal-modal');
				const content = document.getElementById('legal-modal-content');
				modal.classList.remove('hidden');
				let url = type === 'terms' ? '/terms' : '/privacy';
				const res = await fetch(url);
				const html = await res.text();
				// Extract the <main> content only
				const mainMatch = html.match(/<main[\s\S]*?<\/main>/);
				content.innerHTML = mainMatch ? mainMatch[0] : html;
			}
			function closeLegalModal() {
				document.getElementById('legal-modal').classList.add('hidden');
			}
		</script>
	}
}
