package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ Auth() {
	@layouts.BaseLayout() {
		<main class="flex items-center justify-center min-h-[calc(100vh-72px)] bg-background px-4 py-12">
			<div class="bg-card rounded-2xl shadow-2xl w-full max-w-md p-10 border border-border flex flex-col gap-8">
				<h2 class="text-4xl font-extrabold text-center mb-2 text-primary tracking-tight">Welcome</h2>
				<div id="tab-switch" class="flex justify-center gap-6 mb-4">
					<button id="login-tab" class="pb-2 px-4 font-semibold text-primary border-b-2 border-primary bg-transparent transition-colors duration-200 rounded-t-md focus:outline-none">
						Login
					</button>
					<button id="signup-tab" class="pb-2 px-4 font-semibold text-muted-foreground hover:text-primary border-b-2 border-transparent bg-transparent transition-colors duration-200 rounded-t-md focus:outline-none">
						Sign Up
					</button>
				</div>

				<!-- Login Form -->
				<div id="login-form">
					<form id="login-form-element" class="flex flex-col gap-5">
						<div id="login-error" class="hidden text-destructive text-sm text-center"></div>
						<input
							name="email"
							type="email"
							placeholder="Email"
							required
							class="w-full border border-input rounded-lg px-4 py-3 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-shadow"
						/>
						<input
							name="password"
							type="password"
							placeholder="Password"
							required
							class="w-full border border-input rounded-lg px-4 py-3 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-shadow"
						/>
						<div class="flex items-center gap-2">
							<input id="keep-logged-in" name="keepLoggedIn" type="checkbox" class="accent-primary h-4 w-4 rounded border border-input focus:ring-2 focus:ring-primary" />
							<label for="keep-logged-in" class="text-sm text-muted-foreground select-none cursor-pointer">Keep me logged in</label>
						</div>
						<div class="w-full mt-2">
							@button.Button(button.Props{Variant: "default", Type: "submit", Class: "w-full py-2 text-lg font-semibold"}) {
							Log In
							}
						</div>
					</form>
				</div>

				<!-- Sign Up Form -->
				<div id="signup-form" class="hidden">
					<form id="signup-form-element" class="flex flex-col gap-5">
						<div id="signup-error" class="hidden text-destructive text-sm text-center"></div>
						<input
							name="username"
							type="text"
							placeholder="Username"
							required
							class="w-full border border-input rounded-lg px-4 py-3 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-shadow"
						/>
						<input
							name="email"
							type="email"
							placeholder="Email"
							required
							class="w-full border border-input rounded-lg px-4 py-3 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-shadow"
						/>
						<input
							name="password"
							type="password"
							placeholder="Password"
							required
							class="w-full border border-input rounded-lg px-4 py-3 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-shadow"
						/>
						<input
							name="confirmPassword"
							type="password"
							placeholder="Confirm Password"
							required
							class="w-full border border-input rounded-lg px-4 py-3 bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-shadow"
						/>
						<div class="w-full mt-2">
							@button.Button(button.Props{Variant: "primary", Type: "submit", Class: "w-full py-2 text-lg font-semibold"}) {
							Sign Up
							}
						</div>
					</form>
				</div>
				<div class="text-center text-muted-foreground text-xs mt-2">
					By continuing, you agree to our <a href="/terms" class="underline hover:text-primary">Terms of Service</a> and <a href="/privacy" class="underline hover:text-primary">Privacy Policy</a>.
				</div>
			</div>
		</main>

		<script>
			const loginTab = document.getElementById('login-tab');
			const signupTab = document.getElementById('signup-tab');
			const loginForm = document.getElementById('login-form');
			const signupForm = document.getElementById('signup-form');

			loginTab.onclick = () => {
				loginTab.classList.add('text-primary', 'border-primary');
				signupTab.classList.remove('text-primary', 'border-primary');
				signupTab.classList.add('text-muted-foreground');
				loginForm.classList.remove('hidden');
				signupForm.classList.add('hidden');
			};

			signupTab.onclick = () => {
				signupTab.classList.add('text-primary', 'border-primary');
				loginTab.classList.remove('text-primary', 'border-primary');
				loginTab.classList.add('text-muted-foreground');
				signupForm.classList.remove('hidden');
				loginForm.classList.add('hidden');
			};

			const loginFormEl = document.getElementById('login-form-element');
			const signupFormEl = document.getElementById('signup-form-element');
			const loginErrorEl = document.getElementById('login-error');
			const signupErrorEl = document.getElementById('signup-error');

			loginFormEl.onsubmit = async (e) => {
				e.preventDefault();
				loginErrorEl.classList.add('hidden');
				const formData = new FormData(loginFormEl);
				const keepLoggedIn = document.getElementById('keep-logged-in').checked;
				if (keepLoggedIn) {
					formData.set('keepLoggedIn', '1');
				} else {
					formData.delete('keepLoggedIn');
				}
				const res = await fetch('/login', {
					method: 'POST',
					body: formData,
				});
				const text = await res.text();
				if (!res.ok) {
					loginErrorEl.textContent = text;
					loginErrorEl.classList.remove('hidden');
				} else {
					window.location.href = '/dashboard';
				}
			};

			signupFormEl.onsubmit = async (e) => {
				e.preventDefault();
				signupErrorEl.classList.add('hidden');
				const formData = new FormData(signupFormEl);
				const res = await fetch('/signup', {
					method: 'POST',
					body: formData,
				});
				const text = await res.text();
				if (!res.ok) {
					signupErrorEl.textContent = text;
					signupErrorEl.classList.remove('hidden');
				} else {
					window.location.href = '/dashboard';
				}
			};
		</script>
	}
}
