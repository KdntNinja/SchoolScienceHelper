package pages

import (
	"KdnSite/ui/components/avatar"
	"KdnSite/ui/components/badge"
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/form"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/tabs"
	"KdnSite/ui/layouts"
)

templ Settings(auth0Domain string, auth0ClientID string) {
	@layouts.BaseLayout() {
		@card.Card(card.Props{Class: "flex flex-col items-center min-h-[calc(100vh-72px)] bg-gradient-to-b from-primary/5 to-background px-4 py-12 relative w-full max-w-2xl mx-auto p-8 gap-8"}) {
			@card.Header(card.HeaderProps{}) {
				@card.Title(card.TitleProps{Class: "text-3xl font-bold mb-2 text-primary"}) {
					Settings 
				}
			}
			@card.Content(card.ContentProps{}) {
				@tabs.Tabs(tabs.Props{ID: "settings-tabs", Class: "w-full mt-8 md:mt-12"}) {
					@tabs.List(tabs.ListProps{ID: "settings-tabs-list", Class: "mb-8 md:mb-10 gap-4 md:gap-8 flex-row flex-wrap justify-center"}) {
						@tabs.Trigger(tabs.TriggerProps{Value: "profile", TabsID: "settings-tabs"}) {
							Profile 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "account", TabsID: "settings-tabs"}) {
							Account 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "security", TabsID: "settings-tabs"}) {
							Security 
						}
					}
					@tabs.Content(tabs.ContentProps{Value: "profile", TabsID: "settings-tabs"}) {
						@card.Card(card.Props{Class: "w-full flex flex-col items-center justify-center p-8 md:p-12 rounded-2xl border border-border bg-muted/30 shadow gap-8 md:gap-10"}) {
						  <div class="relative group mb-4 md:mb-6">
						    @avatar.Avatar(avatar.Props{ID: "profile-avatar", Size: avatar.SizeLg, Class: "shadow-lg border-4 border-primary/40"}) {
						      <span id="avatar-image-slot"></span>
						    }
						    <label for="avatar-file" class="absolute bottom-2 right-2 bg-primary/90 rounded-full p-2 shadow-lg cursor-pointer opacity-80 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center" title="Change avatar">
						      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536M9 13l6-6m2 2a2.828 2.828 0 11-4-4 2.828 2.828 0 014 4z" /></svg>
						      <input type="file" id="avatar-file" accept="image/*" class="hidden" />
						    </label>
						    <div id="avatar-upload-spinner" class="hidden absolute inset-0 flex items-center justify-center bg-black/30 rounded-full">
						      <svg class="animate-spin h-8 w-8 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path></svg>
						    </div>
						  </div>
						  @form.Item() {
						    <form id="avatar-upload-form" class="flex flex-col items-center gap-3 mt-2 w-full max-w-xs" enctype="multipart/form-data">
						      <div class="w-full flex flex-row gap-3 items-center justify-center">
						        @button.Button(button.Props{Type: button.TypeSubmit, Variant: button.VariantDefault, Class: "w-full flex-1 rounded-lg font-semibold shadow-sm hover:shadow-md transition-all duration-200"}) {
						          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5-5m0 0l5 5m-5-5v12" /></svg>
						          Upload New Avatar
						        }
						      </div>
						      @form.Message(form.MessageProps{ID: "avatar-upload-status", Class: "mt-1"})
						    </form>
						  }
						  @card.Title(card.TitleProps{Class: "font-semibold text-lg mb-2 mt-2 md:mb-3 md:mt-4", ID: "profile-name"})
						  @card.Description(card.DescriptionProps{Class: "text-sm text-muted-foreground mb-2", ID: "profile-email"})
						  @badge.Badge(badge.Props{Class: "mb-2", ID: "profile-roles"})
						  <script>
						  // Fetch user profile and update avatar, name, email, roles
						  fetch('/api/auth/check', { credentials: 'include' })
						    .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
						    .then(data => {
						      if (data && data.user) {
						        const user = data.user;
						        const slot = document.getElementById('avatar-image-slot');
						        if (user.picture) {
						          slot.innerHTML = `<img src="${user.picture}" alt="avatar" class="rounded-full w-full h-full object-cover" />`;
						        } else {
						          // Fallback: initials with gradient
						          const initial = (user.name ? user.name[0] : '?').toUpperCase();
						          slot.innerHTML = `<span class='font-bold text-4xl text-primary'>${initial}</span>`;
						        }
						        document.getElementById('profile-name').textContent = user.name || user.nickname || 'Unknown';
						        document.getElementById('profile-email').textContent = user.email || '';
						        document.getElementById('profile-roles').textContent = user.roles ? user.roles.join(', ') : '';
						        if (user.nickname) {
						          const usernameInput = document.getElementById('change-username-input');
						          if (usernameInput && !usernameInput.value) usernameInput.value = user.nickname;
						        }
						      }
						    });
						  // Instant preview for avatar
						  document.getElementById('avatar-file').onchange = (e) => {
						    const file = e.target.files[0];
						    if (file) {
						      const reader = new FileReader();
						      reader.onload = ev => {
						        document.getElementById('avatar-image-slot').innerHTML = `<img src="${ev.target.result}" alt="avatar preview" class="rounded-full w-full h-full object-cover" />`;
						      };
						      reader.readAsDataURL(file);
						    }
						  };
						  // Avatar upload handler with spinner
						  document.getElementById('avatar-upload-form').onsubmit = async (e) => {
						    e.preventDefault();
						    const fileInput = document.getElementById('avatar-file');
						    const status = document.getElementById('avatar-upload-status');
						    const spinner = document.getElementById('avatar-upload-spinner');
						    if (!fileInput.files || !fileInput.files[0]) {
						      status.textContent = 'Please select an image.';
						      status.className = 'text-xs text-red-600 mt-1';
						      return;
						    }
						    spinner.classList.remove('hidden');
						    const formData = new FormData();
						    formData.append('avatar', fileInput.files[0]);
						    status.textContent = 'Uploading...';
						    status.className = 'text-xs text-muted-foreground mt-1';
						    const resp = await fetch('/api/auth/avatar', {
						      method: 'POST',
						      body: formData,
						      credentials: 'include',
						    });
						    spinner.classList.add('hidden');
						    if (resp.ok) {
						      status.textContent = 'Avatar updated!';
						      status.className = 'text-xs text-green-600 mt-1';
						      fetch('/api/auth/check', { credentials: 'include' })
						        .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
						        .then(data => {
						          if (data && data.user && data.user.picture) {
						            document.getElementById('avatar-image-slot').innerHTML = `<img src="${data.user.picture}?t=${Date.now()}" alt="avatar" class="rounded-full w-full h-full object-cover" />`;
						          }
						        });
						    } else {
						      const err = await resp.text();
						      status.textContent = err || 'Failed to upload avatar.';
						      status.className = 'text-xs text-red-600 mt-1';
						    }
						  };
						  </script>
						}
					}
					@tabs.Content(tabs.ContentProps{Value: "account", TabsID: "settings-tabs"}) {
						<div class="space-y-8">
							@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border shadow-sm"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
									Change Username
								}
								<form id="change-username-form" class="mb-2 w-full flex flex-col gap-2">
									@form.Item() {
										@form.Label(form.LabelProps{For: "change-username-input", Class: "font-semibold text-base"}) {
											Username
										}
										@input.Input(input.Props{ID: "change-username-input", Type: input.TypeText, Placeholder: "New username", Class: "mb-2 w-full rounded-lg border border-border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary/50"})
										@form.Description(form.DescriptionProps{ID: "change-username-status", Class: "text-xs mt-2 text-muted-foreground"})
										@button.Button(button.Props{ID: "change-username-btn", Class: "btn btn-primary w-full rounded-lg font-semibold shadow-sm hover:shadow-md transition-all duration-200", Type: button.TypeSubmit}) {
											Change Username
										}
									}
								</form>
								<script>
                document.getElementById('change-username-form').onsubmit = async (e) => {
                    e.preventDefault();
                    const username = document.getElementById('change-username-input').value;
                    const status = document.getElementById('change-username-status');
                    status.textContent = 'Updating...';
                    const resp = await fetch('/api/auth/change-username', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username }),
                        credentials: 'include',
                    });
                    if (resp.ok) {
                        status.textContent = 'Username updated!';
                        // Refresh profile info (avatar, name, etc)
                        fetch('/api/auth/check', { credentials: 'include' })
                          .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
                          .then(data => {
                            if (data && data.user) {
                              document.getElementById('profile-name').textContent = data.user.name || data.user.nickname || 'Unknown';
                              // Optionally update avatar if name initial is used
                              const avatar = document.getElementById('profile-avatar');
                              if (!data.user.picture && avatar) {
                                avatar.textContent = (data.user.name ? data.user.name[0] : '?').toUpperCase();
                              }
                            }
                          });
                    } else {
                        const err = await resp.text();
                        status.textContent = err || 'Failed to update username.';
                    }
                };
            </script>
							}
							@card.Card(card.Props{Class: "p-6 bg-muted/40 border border-border shadow-lg transition-all duration-300 hover:shadow-2xl"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-bold text-primary mb-4 flex items-center gap-2"}) {
									Change Password
								}
								@button.Button(button.Props{ID: "change-password-btn", Class: "btn btn-primary w-full rounded-lg font-semibold shadow-sm hover:shadow-md transition-all duration-200"}) {
									Send Password Change Email
								}
								@card.Description(card.DescriptionProps{ID: "change-password-status", Class: "text-xs mt-2 text-muted-foreground"})
								<script>
                document.getElementById('change-password-btn').onclick = async () => {
                    const status = document.getElementById('change-password-status');
                    status.textContent = 'Sending...';
                    // Get user email from profile info (already loaded on page)
                    const email = document.getElementById('profile-email').textContent;
                    if (!email || !email.includes('@')) {
                        status.textContent = 'Could not determine your email.';
                        return;
                    }
                    const resp = await fetch('/api/auth/change-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email }),
                        credentials: 'include',
                    });
                    status.textContent = resp.ok ? 'Password change email sent!' : 'Failed to send password change email.';
                };
            </script>
							}
							@card.Card(card.Props{Class: "p-6 bg-muted/40 border border-border shadow-lg transition-all duration-300 hover:shadow-2xl"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-bold text-primary mb-4 flex items-center gap-2"}) {
									Delete Account
								}
								<div id="delete-confirm-section" class="w-full">
									@button.Button(button.Props{
										ID:      "delete-btn",
										Variant: button.VariantDefault,
										Class:   "w-full flex items-center justify-center gap-2 bg-[#ff2222] text-black font-semibold px-4 py-2 rounded-lg shadow hover:bg-red-700 hover:text-white transition-all duration-200 mt-4",
										Attributes: templ.Attributes{
											"data-theme-btn": "true",
											"style": "background-color:#ff2222!important;color:#000!important;border:none!important;",
										},
									}) {
										Delete Account
									}
								</div>
								<script>
                let deleteConfirm = false;
                function resetDeleteButton() {
                    const section = document.getElementById('delete-confirm-section');
                    section.innerHTML = `<button id=\"delete-btn\" class=\"w-full flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition-all duration-200 mt-4\" data-theme-btn=\"true\"><svg class=\"h-5 w-5 mr-2\" fill=\"none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>Delete Account</button>`;
                    document.getElementById('delete-btn').onclick = deleteHandler;
                    deleteConfirm = false;
                }
                function deleteHandler() {
                    const section = document.getElementById('delete-confirm-section');
                    if (!deleteConfirm) {
                        section.innerHTML = `
                            <div class=\"mb-4\">
                                <label for=\"delete-password-input\" class=\"block text-sm font-semibold mb-2\">Enter your password to confirm:</label>
                                <input id=\"delete-password-input\" type=\"password\" class=\"w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary\" placeholder=\"Enter your password\" autocomplete=\"off\" />
                            </div>
                            <button id=\"final-delete-btn\" class=\"w-full bg-red-600 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50\" disabled>Confirm Delete</button>
                            <div class=\"form-error text-destructive text-sm mt-1\" style=\"display:none\"></div>
                            <button id=\"cancel-delete-btn\" class=\"w-full mt-2 border border-border rounded-lg py-2\">Cancel</button>
                        `;
                        deleteConfirm = true;
                        const input = document.getElementById('delete-password-input');
                        const finalBtn = document.getElementById('final-delete-btn');
                        const cancelBtn = document.getElementById('cancel-delete-btn');
                        input.addEventListener('input', () => {
                            finalBtn.disabled = input.value.length < 6;
                        });
                        finalBtn.onclick = async () => {
                            finalBtn.disabled = true;
                            finalBtn.textContent = 'Deleting...';
                            try {
                                const res = await fetch('/api/auth/delete', {
                                    method: 'POST',
                                    credentials: 'include',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ password: input.value })
                                });
                                if (res.ok) {
                                    window.location.href = '/';
                                } else {
                                    const err = await res.text();
                                    finalBtn.disabled = false;
                                    finalBtn.textContent = 'Confirm Delete';
                                    const errDiv = section.querySelector('.form-error');
                                    errDiv.textContent = err || 'Failed to delete account. Password may be incorrect.';
                                    errDiv.style.display = '';
                                }
                            } catch {
                                finalBtn.disabled = false;
                                finalBtn.textContent = 'Confirm Delete';
                                const errDiv = section.querySelector('.form-error');
                                errDiv.textContent = 'Network error.';
                                errDiv.style.display = '';
                            }
                        };
                        cancelBtn.onclick = resetDeleteButton;
                        return;
                    }
                }
                document.getElementById('delete-btn').onclick = deleteHandler;
            </script>
							}
						</div>
					}
					@tabs.Content(tabs.ContentProps{Value: "security", TabsID: "settings-tabs"}) {
						<section class="space-y-8">
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2"}) {
									Log out 
								}
								@button.Button(button.Props{ID: "logout-btn", Class: "btn btn-sm btn-destructive mt-2"}) {
									Log out 
								}
							}
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2"}) {
									Log out from all devices 
								}
								@button.Button(button.Props{ID: "revoke-sessions-btn", Class: "btn btn-sm btn-destructive mt-2"}) {
									Log out from all devices 
								}
							}
						</section>
						<script>
// Profile info
document.getElementById('logout-btn').onclick = () => {
  const auth0Domain = "{{ auth0Domain }}";
  const auth0ClientID = "{{ auth0ClientID }}";
  const returnTo = encodeURIComponent('https://app.kdnsite.site');
  window.location.href = `https://${auth0Domain}/v2/logout?client_id=${auth0ClientID}&returnTo=${returnTo}`;
};
document.getElementById('revoke-sessions-btn').onclick = async () => {
  const btn = document.getElementById('revoke-sessions-btn');
  btn.disabled = true; btn.textContent = 'Logging out...';
  await fetch('/api/auth/logout-all', { method: 'POST', credentials: 'include' });
  const auth0Domain = "{{ auth0Domain }}";
  const auth0ClientID = "{{ auth0ClientID }}";
  const returnTo = encodeURIComponent('https://app.kdnsite.site');
  window.location.href = `https://${auth0Domain}/v2/logout?client_id=${auth0ClientID}&returnTo=${returnTo}`;
};
</script>
					}
				}
			}
		}
	}
}
