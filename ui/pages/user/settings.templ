package pages

import (
	"KdnSite/ui/components/avatar"
	"KdnSite/ui/components/badge"
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/tabs"
	"KdnSite/ui/layouts"
)

templ Settings(auth0Domain string, auth0ClientID string) {
	@layouts.BaseLayout() {
		@card.Card(card.Props{Class: "flex flex-col items-center min-h-[calc(100vh-72px)] bg-gradient-to-b from-primary/5 to-background px-4 py-12 relative w-full max-w-2xl mx-auto p-8 gap-8"}) {
			@card.Header(card.HeaderProps{}) {
				@card.Title(card.TitleProps{Class: "text-3xl font-bold mb-2 text-primary"}) {
					Settings 
				}
			}
			@card.Content(card.ContentProps{}) {
				<!-- User Profile Card -->
				@card.Card(card.Props{Class: "w-full flex flex-col items-center justify-center mb-8 p-6 rounded-xl border border-border bg-muted/30 shadow"}) {
					@avatar.Avatar(avatar.Props{Class: "w-16 h-16 mb-2", ID: "profile-avatar"})
					@card.Title(card.TitleProps{Class: "font-semibold text-lg mb-1", ID: "profile-name"})
					@card.Description(card.DescriptionProps{Class: "text-sm text-muted-foreground mb-1", ID: "profile-email"})
					@badge.Badge(badge.Props{Class: "mb-1", ID: "profile-roles"})
				}
				@tabs.Tabs(tabs.Props{ID: "settings-tabs", Class: "w-full"}) {
					@tabs.List(tabs.ListProps{ID: "settings-tabs-list", Class: "mb-6"}) {
						@tabs.Trigger(tabs.TriggerProps{Value: "security", TabsID: "settings-tabs"}) {
							Security 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "account", TabsID: "settings-tabs"}) {
							Account 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "theme", TabsID: "settings-tabs"}) {
							Theme 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "notifications", TabsID: "settings-tabs"}) {
							Notifications 
						}
					}
					@tabs.Content(tabs.ContentProps{Value: "security", TabsID: "settings-tabs"}) {
						<section class="space-y-8">
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
  @card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2 flex items-center gap-2"}) {
    Email Verification
    <span id="profile-verified-status" class="inline-flex items-center text-xs font-semibold px-2 py-1 rounded transition-colors duration-200"></span>
  }
  <div class="flex flex-col gap-2 mb-2">
    <span id="email-verification-status" class="text-sm"></span>
    <span id="email-verification-feedback" class="text-xs"></span>
  </div>
  <button id="resend-verification-btn" class="btn btn-sm btn-primary hidden flex items-center gap-2" type="button">
    <span id="resend-spinner" class="hidden animate-spin h-4 w-4 border-2 border-t-transparent border-white rounded-full"></span>
    <span>Resend Verification Email</span>
  </button>
							}
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2"}) {
									Log out 
								}
								@button.Button(button.Props{ID: "logout-btn", Class: "btn btn-sm btn-destructive mt-2"}) {
									Log out 
								}
							}
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2"}) {
									Log out from all devices 
								}
								@button.Button(button.Props{ID: "revoke-sessions-btn", Class: "btn btn-sm btn-destructive mt-2"}) {
									Log out from all devices 
								}
							}
						</section>
						<script>
// Profile info
function updateVerificationBadge(emailVerified) {
  const badge = document.getElementById('profile-verified-status');
  if (!badge) return;
  if (emailVerified) {
    badge.innerHTML = `<svg class='h-4 w-4 text-green-600 inline' fill='none' viewBox='0 0 24 24' stroke='currentColor'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 13l4 4L19 7' /></svg> <span class='text-green-700'>Verified</span>`;
    badge.className = 'inline-flex items-center text-xs font-semibold px-2 py-1 rounded bg-green-100 text-green-700';
  } else {
    badge.innerHTML = `<svg class='h-4 w-4 text-red-600 inline' fill='none' viewBox='0 0 24 24' stroke='currentColor'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12' /></svg> <span class='text-red-700'>Not Verified</span>`;
    badge.className = 'inline-flex items-center text-xs font-semibold px-2 py-1 rounded bg-red-100 text-red-700';
  }
}
fetch('/api/auth/check', { credentials: 'include' })
  .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
  .then(data => {
    if (data && data.user) {
      const user = data.user;
      document.getElementById('profile-avatar').textContent = (user.name ? user.name[0] : '?').toUpperCase();
      document.getElementById('profile-name').textContent = user.name || 'Unknown';
      document.getElementById('profile-email').textContent = user.email || '';
      document.getElementById('profile-roles').textContent = user.roles ? user.roles.join(', ') : '';
      let emailVerified = !!user.email_verified;
      updateVerificationBadge(emailVerified);
      document.getElementById('email-verification-status').textContent = emailVerified ? 'Your email is verified.' : 'Your email is not verified. Please verify to unlock all features.';
      document.getElementById('resend-verification-btn').classList.toggle('hidden', emailVerified);
    }
  });
document.getElementById('resend-verification-btn').onclick = async () => {
  const btn = document.getElementById('resend-verification-btn');
  const spinner = document.getElementById('resend-spinner');
  const feedback = document.getElementById('email-verification-feedback');
  btn.disabled = true;
  spinner.classList.remove('hidden');
  feedback.textContent = '';
  const resp = await fetch('/api/auth/resend-verification', { method: 'POST', credentials: 'include' });
  spinner.classList.add('hidden');
  btn.disabled = false;
  if (resp.ok) {
    feedback.textContent = 'Verification email sent! Check your inbox.';
    feedback.className = 'text-green-600';
  } else {
    feedback.textContent = 'Failed to send verification email.';
    feedback.className = 'text-red-600';
  }
};
document.getElementById('logout-btn').onclick = () => {
  const auth0Domain = "{{ auth0Domain }}";
  const auth0ClientID = "{{ auth0ClientID }}";
  const returnTo = encodeURIComponent('https://app.kdnsite.site');
  window.location.href = `https://${auth0Domain}/v2/logout?client_id=${auth0ClientID}&returnTo=${returnTo}`;
};
document.getElementById('revoke-sessions-btn').onclick = async () => {
  const btn = document.getElementById('revoke-sessions-btn');
  btn.disabled = true; btn.textContent = 'Logging out...';
  await fetch('/api/auth/logout-all', { method: 'POST', credentials: 'include' });
  const auth0Domain = "{{ auth0Domain }}";
  const auth0ClientID = "{{ auth0ClientID }}";
  const returnTo = encodeURIComponent('https://app.kdnsite.site');
  window.location.href = `https://${auth0Domain}/v2/logout?client_id=${auth0ClientID}&returnTo=${returnTo}`;
};
</script>
					}
					@tabs.Content(tabs.ContentProps{Value: "account", TabsID: "settings-tabs"}) {
						<section class="space-y-8">
							@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
									Change Password 
								}
								@input.Input(input.Props{ID: "change-password-email", Type: "email", Placeholder: "Your email", Class: "mb-2 w-full"})
								@button.Button(button.Props{ID: "change-password-btn", Class: "btn btn-primary w-full"}) {
									Send Password Change Email 
								}
								@card.Description(card.DescriptionProps{ID: "change-password-status", Class: "text-xs mt-2"})
							}
							@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
									Delete Account 
								}
								<div id="delete-confirm-section">
									@button.Button(button.Props{
										ID:      "delete-btn",
										Variant: button.VariantDefault,
										Class:   "w-full flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded shadow transition-colors duration-150 mt-4",
										Attributes: templ.Attributes{
											"data-theme-btn": "true",
										},
									}) {
										Delete Account
									}
								</div>
							}
						</section>
						<script>
document.getElementById('change-password-form').onsubmit = async (e) => {
  e.preventDefault();
  const email = document.getElementById('change-password-email').value;
  const status = document.getElementById('change-password-status');
  status.textContent = 'Sending...';
  const resp = await fetch('/api/auth/change-password', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email }),
    credentials: 'include',
  });
  status.textContent = resp.ok ? 'Password change email sent!' : 'Failed to send password change email.';
};
let deleteConfirm = false;
document.getElementById('delete-btn').onclick = async () => {
  const section = document.getElementById('delete-confirm-section');
  if (!deleteConfirm) {
    section.innerHTML = `
      <div class="mb-4">
        <label for="delete-password-input" class="block text-sm font-semibold mb-2">Enter your password to confirm:</label>
        <input id="delete-password-input" type="password" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Enter your password" autocomplete="off" />
      </div>
      <button id="final-delete-btn" class="w-full bg-red-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50" disabled>Confirm Delete</button>
      <div class="form-error text-destructive text-sm mt-1" style="display:none"></div>
      <button id="cancel-delete-btn" class="w-full mt-2 border border-border rounded py-2">Cancel</button>
    `;
    deleteConfirm = true;
    const input = document.getElementById('delete-password-input');
    const finalBtn = document.getElementById('final-delete-btn');
    const cancelBtn = document.getElementById('cancel-delete-btn');
    input.addEventListener('input', () => {
      finalBtn.disabled = input.value.length < 6;
    });
    finalBtn.onclick = async () => {
      finalBtn.disabled = true;
      finalBtn.textContent = 'Deleting...';
      try {
        const res = await fetch('/api/auth/delete', {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password: input.value })
        });
        if (res.ok) {
          window.location.href = '/';
        } else {
          const err = await res.text();
          finalBtn.disabled = false;
          finalBtn.textContent = 'Confirm Delete';
          const errDiv = section.querySelector('.form-error');
          errDiv.textContent = err || 'Failed to delete account. Password may be incorrect.';
          errDiv.style.display = '';
        }
      } catch {
        finalBtn.disabled = false;
        finalBtn.textContent = 'Confirm Delete';
        const errDiv = section.querySelector('.form-error');
        errDiv.textContent = 'Network error.';
        errDiv.style.display = '';
      }
    };
    cancelBtn.onclick = () => {
      section.innerHTML = `<button id=\"delete-btn\" class=\"w-full flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded shadow transition-colors duration-150 mt-4\" data-theme-btn=\"true\">Delete Account </button>`;
      document.getElementById('delete-btn').onclick = arguments.callee;
      deleteConfirm = false;
    };
    return;
  }
};
// Theme switching integration
const themeBtns = document.querySelectorAll('[data-theme-btn]');
themeBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    // Use the same logic as your ThemeSwitcher Alpine/JS handler
    if (window.toggleTheme) {
      window.toggleTheme();
    } else if (typeof Alpine !== 'undefined' && Alpine.store && Alpine.store('theme')) {
      Alpine.store('theme').toggleTheme();
    }
  });
});
</script>
					}
					@tabs.Content(tabs.ContentProps{Value: "theme", TabsID: "settings-tabs"}) {
						@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border"}) {
							@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
								Theme 
							}
							<div class="flex gap-4 items-center">
								@button.Button(button.Props{ID: "theme-light", Class: "btn btn-sm"}) {
									Light 
								}
								@button.Button(button.Props{ID: "theme-dark", Class: "btn btn-sm"}) {
									Dark 
								}
								@button.Button(button.Props{ID: "theme-system", Class: "btn btn-sm"}) {
									System 
								}
							</div>
							@card.Description(card.DescriptionProps{ID: "theme-status", Class: "text-xs mt-2"})
						}
						<script>
function setTheme(theme) {
  document.documentElement.setAttribute('data-theme', theme);
  localStorage.setItem('theme', theme);
  document.getElementById('theme-status').textContent = `Theme set to ${theme}`;
}
document.getElementById('theme-light').onclick = () => setTheme('light');
document.getElementById('theme-dark').onclick = () => setTheme('dark');
document.getElementById('theme-system').onclick = () => setTheme('system');
</script>
					}
					@tabs.Content(tabs.ContentProps{Value: "notifications", TabsID: "settings-tabs"}) {
						@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border"}) {
							@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
								Notification Preferences 
							}
							@card.Description(card.DescriptionProps{Class: "text-muted-foreground"}) {
								Coming soon: control your email and in-app notification preferences. 
							}
						}
					}
					@tabs.Script()
				}
			}
		}
	}
}
