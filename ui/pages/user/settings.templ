package pages

import (
	"KdnSite/ui/components/avatar"
	"KdnSite/ui/components/badge"
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/form"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/tabs"
	"KdnSite/ui/layouts"
)

templ Settings(auth0Domain string, auth0ClientID string) {
	@layouts.BaseLayout() {
		@card.Card(card.Props{Class: "flex flex-col items-center min-h-[calc(100vh-72px)] bg-gradient-to-b from-primary/5 to-background px-4 py-12 relative w-full max-w-2xl mx-auto p-8 gap-8"}) {
			@card.Header(card.HeaderProps{}) {
				@card.Title(card.TitleProps{Class: "text-3xl font-bold mb-2 text-primary"}) {
					Settings 
				}
			}
			@card.Content(card.ContentProps{}) {
				<!-- User Profile Card -->
				@card.Card(card.Props{Class: "w-full flex flex-col items-center justify-center p-6 rounded-xl border border-border bg-muted/30 shadow"}) {
					@avatar.Avatar(avatar.Props{Class: "w-16 h-16 mb-2", ID: "profile-avatar"})
					<form id="avatar-upload-form" class="flex flex-col items-center gap-2 mt-2" enctype="multipart/form-data">
						<input type="file" id="avatar-file" accept="image/*" class="block w-full text-sm text-muted-foreground file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20" />
						<button type="submit" class="btn btn-sm btn-primary">Upload New Avatar</button>
						<span id="avatar-upload-status" class="text-xs mt-1"></span>
					</form>
					@card.Title(card.TitleProps{Class: "font-semibold text-lg mb-1", ID: "profile-name"})
					@card.Description(card.DescriptionProps{Class: "text-sm text-muted-foreground mb-1", ID: "profile-email"})
					@badge.Badge(badge.Props{Class: "mb-1", ID: "profile-roles"})
					<div>
						<script>
						// Fetch user profile and update avatar, name, email, roles
						fetch('/api/auth/check', { credentials: 'include' })
						  .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
						  .then(data => {
							if (data && data.user) {
							  const user = data.user;
							  // Avatar: use picture if available, else fallback to initial
							  const avatar = document.getElementById('profile-avatar');
							  if (user.picture) {
								avatar.innerHTML = `<img src="${user.picture}" alt="avatar" class="rounded-full w-16 h-16 object-cover" />`;
							  } else {
								avatar.textContent = (user.name ? user.name[0] : '?').toUpperCase();
							  }
							  document.getElementById('profile-name').textContent = user.name || user.nickname || 'Unknown';
							  document.getElementById('profile-email').textContent = user.email || '';
							  document.getElementById('profile-roles').textContent = user.roles ? user.roles.join(', ') : '';
							  // Optionally update username input with current nickname
							  if (user.nickname) {
								const usernameInput = document.getElementById('change-username-input');
								if (usernameInput && !usernameInput.value) usernameInput.value = user.nickname;
							  }
							}
						  });
						// Avatar upload handler
						document.getElementById('avatar-upload-form').onsubmit = async (e) => {
						  e.preventDefault();
						  const fileInput = document.getElementById('avatar-file');
						  const status = document.getElementById('avatar-upload-status');
						  if (!fileInput.files || !fileInput.files[0]) {
							status.textContent = 'Please select an image.';
							status.className = 'text-xs text-red-600 mt-1';
							return;
						  }
						  const formData = new FormData();
						  formData.append('avatar', fileInput.files[0]);
						  status.textContent = 'Uploading...';
						  status.className = 'text-xs text-muted-foreground mt-1';
						  const resp = await fetch('/api/auth/avatar', {
							method: 'POST',
							body: formData,
							credentials: 'include',
						  });
						  if (resp.ok) {
							status.textContent = 'Avatar updated!';
							status.className = 'text-xs text-green-600 mt-1';
							// Optionally, refresh avatar
							fetch('/api/auth/check', { credentials: 'include' })
							  .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
							  .then(data => {
								if (data && data.user && data.user.picture) {
								  document.getElementById('profile-avatar').innerHTML = `<img src="${data.user.picture}?t=${Date.now()}" alt="avatar" class="rounded-full w-16 h-16 object-cover" />`;
								}
							  });
						  } else {
							const err = await resp.text();
							status.textContent = err || 'Failed to upload avatar.';
							status.className = 'text-xs text-red-600 mt-1';
						  }
						};
						</script>
					</div>
				}
				@tabs.Tabs(tabs.Props{ID: "settings-tabs", Class: "w-full"}) {
					@tabs.List(tabs.ListProps{ID: "settings-tabs-list", Class: "mb-6"}) {
						@tabs.Trigger(tabs.TriggerProps{Value: "profile", TabsID: "settings-tabs"}) {
							Profile 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "account", TabsID: "settings-tabs"}) {
							Account 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "security", TabsID: "settings-tabs"}) {
							Security 
						}
						@tabs.Trigger(tabs.TriggerProps{Value: "notifications", TabsID: "settings-tabs"}) {
							Notifications 
						}
					}
					@tabs.Content(tabs.ContentProps{Value: "profile", TabsID: "settings-tabs"}) {
						@card.Card(card.Props{Class: "w-full flex flex-col items-center justify-center p-6 rounded-xl border border-border bg-muted/30 shadow"}) {
							@avatar.Avatar(avatar.Props{Class: "w-16 h-16 mb-2", ID: "profile-avatar"})
							<form id="avatar-upload-form" class="flex flex-col items-center gap-2 mt-2" enctype="multipart/form-data">
								<input type="file" id="avatar-file" accept="image/*" class="block w-full text-sm text-muted-foreground file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20" />
								<button type="submit" class="btn btn-sm btn-primary">Upload New Avatar</button>
								<span id="avatar-upload-status" class="text-xs mt-1"></span>
							</form>
							@card.Title(card.TitleProps{Class: "font-semibold text-lg mb-1", ID: "profile-name"})
							@card.Description(card.DescriptionProps{Class: "text-sm text-muted-foreground mb-1", ID: "profile-email"})
							@badge.Badge(badge.Props{Class: "mb-1", ID: "profile-roles"})
							<div>
								<script>
								// Fetch user profile and update avatar, name, email, roles
								fetch('/api/auth/check', { credentials: 'include' })
								  .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
								  .then(data => {
									if (data && data.user) {
									  const user = data.user;
									  // Avatar: use picture if available, else fallback to initial
									  const avatar = document.getElementById('profile-avatar');
									  if (user.picture) {
										avatar.innerHTML = `<img src="${user.picture}" alt="avatar" class="rounded-full w-16 h-16 object-cover" />`;
									  } else {
										avatar.textContent = (user.name ? user.name[0] : '?').toUpperCase();
									  }
									  document.getElementById('profile-name').textContent = user.name || user.nickname || 'Unknown';
									  document.getElementById('profile-email').textContent = user.email || '';
									  document.getElementById('profile-roles').textContent = user.roles ? user.roles.join(', ') : '';
									  // Optionally update username input with current nickname
									  if (user.nickname) {
										const usernameInput = document.getElementById('change-username-input');
										if (usernameInput && !usernameInput.value) usernameInput.value = user.nickname;
									  }
									}
								  });
								// Avatar upload handler
								document.getElementById('avatar-upload-form').onsubmit = async (e) => {
								  e.preventDefault();
								  const fileInput = document.getElementById('avatar-file');
								  const status = document.getElementById('avatar-upload-status');
								  if (!fileInput.files || !fileInput.files[0]) {
									status.textContent = 'Please select an image.';
									status.className = 'text-xs text-red-600 mt-1';
									return;
								  }
								  const formData = new FormData();
								  formData.append('avatar', fileInput.files[0]);
								  status.textContent = 'Uploading...';
								  status.className = 'text-xs text-muted-foreground mt-1';
								  const resp = await fetch('/api/auth/avatar', {
									method: 'POST',
									body: formData,
									credentials: 'include',
								  });
								  if (resp.ok) {
									status.textContent = 'Avatar updated!';
									status.className = 'text-xs text-green-600 mt-1';
									// Optionally, refresh avatar
									fetch('/api/auth/check', { credentials: 'include' })
									  .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
									  .then(data => {
										if (data && data.user && data.user.picture) {
										  document.getElementById('profile-avatar').innerHTML = `<img src="${data.user.picture}?t=${Date.now()}" alt="avatar" class="rounded-full w-16 h-16 object-cover" />`;
										}
									  });
								  } else {
									const err = await resp.text();
									status.textContent = err || 'Failed to upload avatar.';
									status.className = 'text-xs text-red-600 mt-1';
								  }
								};
								</script>
							</div>
						}
					}
					@tabs.Content(tabs.ContentProps{Value: "account", TabsID: "settings-tabs"}) {
						<div class="space-y-8">
							@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border shadow-sm"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
									Change Username
								}
								<form id="change-username-form" class="mb-2 w-full flex flex-col gap-2">
									@form.Item() {
										@form.Label(form.LabelProps{For: "change-username-input", Class: "font-semibold text-base"}) {
											Username
										}
										@input.Input(input.Props{ID: "change-username-input", Type: input.TypeText, Placeholder: "New username", Class: "mb-2 w-full rounded-lg border border-border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary/50"})
										@form.Description(form.DescriptionProps{ID: "change-username-status", Class: "text-xs mt-2 text-muted-foreground"})
										@button.Button(button.Props{ID: "change-username-btn", Class: "btn btn-primary w-full rounded-lg font-semibold shadow-sm hover:shadow-md transition-all duration-200", Type: button.TypeSubmit}) {
											Change Username
										}
									}
								</form>
								<script>
                document.getElementById('change-username-form').onsubmit = async (e) => {
                    e.preventDefault();
                    const username = document.getElementById('change-username-input').value;
                    const status = document.getElementById('change-username-status');
                    status.textContent = 'Updating...';
                    const resp = await fetch('/api/auth/change-username', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username }),
                        credentials: 'include',
                    });
                    if (resp.ok) {
                        status.textContent = 'Username updated!';
                        // Refresh profile info (avatar, name, etc)
                        fetch('/api/auth/check', { credentials: 'include' })
                          .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
                          .then(data => {
                            if (data && data.user) {
                              document.getElementById('profile-name').textContent = data.user.name || data.user.nickname || 'Unknown';
                              // Optionally update avatar if name initial is used
                              const avatar = document.getElementById('profile-avatar');
                              if (!data.user.picture && avatar) {
                                avatar.textContent = (data.user.name ? data.user.name[0] : '?').toUpperCase();
                              }
                            }
                          });
                    } else {
                        const err = await resp.text();
                        status.textContent = err || 'Failed to update username.';
                    }
                };
            </script>
							}
							@card.Card(card.Props{Class: "p-6 bg-muted/40 border border-border shadow-lg transition-all duration-300 hover:shadow-2xl"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-bold text-primary mb-4 flex items-center gap-2"}) {
									Change Password
								}
								@button.Button(button.Props{ID: "change-password-btn", Class: "btn btn-primary w-full rounded-lg font-semibold shadow-sm hover:shadow-md transition-all duration-200"}) {
									Send Password Change Email
								}
								@card.Description(card.DescriptionProps{ID: "change-password-status", Class: "text-xs mt-2 text-muted-foreground"})
								<script>
                document.getElementById('change-password-btn').onclick = async () => {
                    const status = document.getElementById('change-password-status');
                    status.textContent = 'Sending...';
                    // Get user email from profile info (already loaded on page)
                    const email = document.getElementById('profile-email').textContent;
                    if (!email || !email.includes('@')) {
                        status.textContent = 'Could not determine your email.';
                        return;
                    }
                    const resp = await fetch('/api/auth/change-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email }),
                        credentials: 'include',
                    });
                    status.textContent = resp.ok ? 'Password change email sent!' : 'Failed to send password change email.';
                };
            </script>
							}
							@card.Card(card.Props{Class: "p-6 bg-muted/40 border border-border shadow-lg transition-all duration-300 hover:shadow-2xl"}) {
								@card.Title(card.TitleProps{Class: "text-xl font-bold text-primary mb-4 flex items-center gap-2"}) {
									Delete Account
								}
								<div id="delete-confirm-section" class="w-full">
									@button.Button(button.Props{
										ID:      "delete-btn",
										Variant: button.VariantDefault,
										Class:   "w-full flex items-center justify-center gap-2 bg-[#ff2222] text-black font-semibold px-4 py-2 rounded-lg shadow hover:bg-red-700 hover:text-white transition-all duration-200 mt-4",
										Attributes: templ.Attributes{
											"data-theme-btn": "true",
											"style": "background-color:#ff2222!important;color:#000!important;border:none!important;",
										},
									}) {
										Delete Account
									}
								</div>
								<script>
                let deleteConfirm = false;
                function resetDeleteButton() {
                    const section = document.getElementById('delete-confirm-section');
                    section.innerHTML = `<button id=\"delete-btn\" class=\"w-full flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition-all duration-200 mt-4\" data-theme-btn=\"true\"><svg class=\"h-5 w-5 mr-2\" fill=\"none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>Delete Account</button>`;
                    document.getElementById('delete-btn').onclick = deleteHandler;
                    deleteConfirm = false;
                }
                function deleteHandler() {
                    const section = document.getElementById('delete-confirm-section');
                    if (!deleteConfirm) {
                        section.innerHTML = `
                            <div class=\"mb-4\">
                                <label for=\"delete-password-input\" class=\"block text-sm font-semibold mb-2\">Enter your password to confirm:</label>
                                <input id=\"delete-password-input\" type=\"password\" class=\"w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary\" placeholder=\"Enter your password\" autocomplete=\"off\" />
                            </div>
                            <button id=\"final-delete-btn\" class=\"w-full bg-red-600 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50\" disabled>Confirm Delete</button>
                            <div class=\"form-error text-destructive text-sm mt-1\" style=\"display:none\"></div>
                            <button id=\"cancel-delete-btn\" class=\"w-full mt-2 border border-border rounded-lg py-2\">Cancel</button>
                        `;
                        deleteConfirm = true;
                        const input = document.getElementById('delete-password-input');
                        const finalBtn = document.getElementById('final-delete-btn');
                        const cancelBtn = document.getElementById('cancel-delete-btn');
                        input.addEventListener('input', () => {
                            finalBtn.disabled = input.value.length < 6;
                        });
                        finalBtn.onclick = async () => {
                            finalBtn.disabled = true;
                            finalBtn.textContent = 'Deleting...';
                            try {
                                const res = await fetch('/api/auth/delete', {
                                    method: 'POST',
                                    credentials: 'include',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ password: input.value })
                                });
                                if (res.ok) {
                                    window.location.href = '/';
                                } else {
                                    const err = await res.text();
                                    finalBtn.disabled = false;
                                    finalBtn.textContent = 'Confirm Delete';
                                    const errDiv = section.querySelector('.form-error');
                                    errDiv.textContent = err || 'Failed to delete account. Password may be incorrect.';
                                    errDiv.style.display = '';
                                }
                            } catch {
                                finalBtn.disabled = false;
                                finalBtn.textContent = 'Confirm Delete';
                                const errDiv = section.querySelector('.form-error');
                                errDiv.textContent = 'Network error.';
                                errDiv.style.display = '';
                            }
                        };
                        cancelBtn.onclick = resetDeleteButton;
                        return;
                    }
                }
                document.getElementById('delete-btn').onclick = deleteHandler;
            </script>
							}
						</div>
					}
					@tabs.Content(tabs.ContentProps{Value: "security", TabsID: "settings-tabs"}) {
						<section class="space-y-8">
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2"}) {
									Log out 
								}
								@button.Button(button.Props{ID: "logout-btn", Class: "btn btn-sm btn-destructive mt-2"}) {
									Log out 
								}
							}
							@card.Card(card.Props{Class: "mb-6 p-4 bg-muted/30 rounded-xl border border-border"}) {
								@card.Title(card.TitleProps{Class: "text-lg font-semibold mb-2"}) {
									Log out from all devices 
								}
								@button.Button(button.Props{ID: "revoke-sessions-btn", Class: "btn btn-sm btn-destructive mt-2"}) {
									Log out from all devices 
								}
							}
						</section>
						<script>
// Profile info
document.getElementById('logout-btn').onclick = () => {
  const auth0Domain = "{{ auth0Domain }}";
  const auth0ClientID = "{{ auth0ClientID }}";
  const returnTo = encodeURIComponent('https://app.kdnsite.site');
  window.location.href = `https://${auth0Domain}/v2/logout?client_id=${auth0ClientID}&returnTo=${returnTo}`;
};
document.getElementById('revoke-sessions-btn').onclick = async () => {
  const btn = document.getElementById('revoke-sessions-btn');
  btn.disabled = true; btn.textContent = 'Logging out...';
  await fetch('/api/auth/logout-all', { method: 'POST', credentials: 'include' });
  const auth0Domain = "{{ auth0Domain }}";
  const auth0ClientID = "{{ auth0ClientID }}";
  const returnTo = encodeURIComponent('https://app.kdnsite.site');
  window.location.href = `https://${auth0Domain}/v2/logout?client_id=${auth0ClientID}&returnTo=${returnTo}`;
};
</script>
					}
				}
			}
		}
	}
}
