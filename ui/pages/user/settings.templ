package pages

import (
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/label"
	"KdnSite/ui/layouts"
)

templ Settings() {
	@layouts.BaseLayout() {
		<main class="flex flex-col items-center min-h-[calc(100vh-72px)] bg-gradient-to-b from-primary/5 to-background px-4 py-12 relative">
			@card.Card(card.Props{
				Class: "bg-card rounded-2xl shadow-2xl w-full max-w-2xl p-10 border border-border space-y-10",
			}) {
				@card.Header(card.HeaderProps{}) {
					@card.Title(card.TitleProps{
						Class: "text-3xl font-black text-center text-primary tracking-tight",
					}) {
						Account Settings
					}
				}
				@card.Content(card.ContentProps{}) {
					<section class="space-y-8">
						@card.Card(card.Props{Class: "mb-8 p-6 bg-muted/30 border border-border"}) {
							@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
								Profile 
							}
							<div id="profile-info" class="text-muted-foreground mb-4">Loading profile...</div>
							<form id="update-profile-form" class="space-y-4">
								<div>
									@label.Label(label.Props{For: "username-input", Class: "mb-2 font-semibold"}) {
										Username 
									}
									@input.Input(input.Props{
										ID:          "username-input",
										Name:        "username",
										Type:        input.TypeText,
										Class:       "w-full",
										Required:    true,
										Placeholder: "Enter your username",
									})
								</div>
								@button.Button(button.Props{Type: "submit", Variant: button.VariantDefault, Class: "w-full"}) {
									Update Username
								}
							</form>
							<form id="change-password-form" class="space-y-4 mt-6">
								<div>
									@label.Label(label.Props{For: "password-input", Class: "mb-2 font-semibold"}) {
										New Password 
									}
									@input.Input(input.Props{
										ID:          "password-input",
										Name:        "password",
										Type:        input.TypePassword,
										Class:       "w-full",
										Required:    true,
										Placeholder: "Enter new password",
									})
								</div>
								@button.Button(button.Props{Type: "submit", Variant: button.VariantDefault, Class: "w-full"}) {
									Change Password
								}
							</form>
							@button.Button(button.Props{ID: "logout-btn", Variant: button.VariantDefault, Class: "w-full mt-6 text-red-600 border-red-600 hover:bg-red-50"}) {
								Log Out 
							}
						}
						@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border"}) {
							@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
								Delete Account 
							}
							<p class="text-muted-foreground mb-4">This will permanently delete your account and all data. This action cannot be undone.</p>
							@button.Button(button.Props{ID: "delete-btn", Variant: button.VariantDefault, Class: "w-full text-red-600 border-red-600 hover:bg-red-50"}) {
								Delete Account 
							}
						}
					</section>
					<script>
function showError(id, msg) {
  let el = document.getElementById(id);
  if (!el) return;
  let err = el.parentElement.querySelector('.form-error');
  if (!err) {
    err = document.createElement('div');
    err.className = 'form-error text-destructive text-sm mt-1';
    el.parentElement.appendChild(err);
  }
  err.textContent = msg;
}
function clearError(id) {
  let el = document.getElementById(id);
  if (!el) return;
  let err = el.parentElement.querySelector('.form-error');
  if (err) err.textContent = '';
}

fetch('/api/auth/check', { credentials: 'include' })
  .then(r => r.json())
  .then(data => {
    if (data && data.user) {
      document.getElementById('profile-info').innerHTML =
        `<div><b>Email:</b> ${data.user.email || 'N/A'}</div>` +
        (data.user.name ? `<div><b>Name:</b> ${data.user.name}</div>` : '');
      document.getElementById('username-input').value = data.user.nickname || data.user.name || '';
    } else {
      document.getElementById('profile-info').innerHTML = 'Not signed in.';
    }
  })
  .catch(() => {
    document.getElementById('profile-info').innerHTML = 'Failed to load profile.';
  });

document.getElementById('logout-btn').onclick = () => {
  window.location.href = '/api/auth/logout';
};

document.getElementById('delete-btn').onclick = async () => {
  // No popup, just show error below button if failed
  const btn = document.getElementById('delete-btn');
  clearError('delete-btn');
  const res = await fetch('/api/auth/delete', { method: 'POST', credentials: 'include' });
  if (res.ok) {
    window.location.href = '/';
  } else {
    showError('delete-btn', 'Failed to delete account.');
  }
};

document.getElementById('update-profile-form').onsubmit = async (e) => {
  e.preventDefault();
  clearError('username-input');
  const username = document.getElementById('username-input').value;
  const res = await fetch('/api/auth/update-profile', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify({ username })
  });
  if (res.ok) {
    document.getElementById('profile-info').innerHTML = 'Username updated!';
  } else {
    showError('username-input', 'Failed to update username.');
  }
};

document.getElementById('change-password-form').onsubmit = async (e) => {
  e.preventDefault();
  clearError('password-input');
  const password = e.target.password.value;
  const res = await fetch('/api/auth/change-password', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify({ password })
  });
  if (res.ok) {
    document.getElementById('profile-info').innerHTML = 'Password changed!';
  } else {
    showError('password-input', 'Failed to change password.');
  }
};
					</script>
				}
			}
		</main>
	}
}
