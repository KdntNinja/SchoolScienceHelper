package pages

import (
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/label"
	"KdnSite/ui/layouts"
)

templ Settings() {
	@layouts.BaseLayout() {
		<main class="flex flex-col items-center min-h-[calc(100vh-72px)] bg-gradient-to-b from-primary/5 to-background px-4 py-12 relative">
			@card.Card(card.Props{
				Class: "bg-card rounded-2xl shadow-2xl w-full max-w-2xl p-10 border border-border space-y-10",
			}) {
				@card.Header(card.HeaderProps{}) {
					@card.Title(card.TitleProps{
						Class: "text-3xl font-black text-center text-primary tracking-tight",
					}) {
						Account Settings
					}
				}
				@card.Content(card.ContentProps{}) {
					<section class="space-y-8">
						@card.Card(card.Props{Class: "mb-8 p-6 bg-muted/30 border border-border"}) {
							@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
								Profile 
							}
							<div id="profile-info" class="text-muted-foreground mb-4">Loading profile...</div>
							<form id="update-profile-form" class="space-y-4">
								<div>
									@label.Label(label.Props{For: "username-input", Class: "mb-2 font-semibold"}) {
										Username 
									}
									@input.Input(input.Props{
										ID:          "username-input",
										Name:        "username",
										Type:        input.TypeText,
										Class:       "w-full",
										Required:    true,
										Placeholder: "Enter your username",
									})
								</div>
								@button.Button(button.Props{Type: "submit", Variant: button.VariantDefault, Class: "w-full"}) {
									Update Username
								}
							</form>
							<form id="change-password-form" class="space-y-4 mt-6">
								<div>
									@label.Label(label.Props{For: "password-input", Class: "mb-2 font-semibold"}) {
										New Password 
									}
									@input.Input(input.Props{
										ID:          "password-input",
										Name:        "password",
										Type:        input.TypePassword,
										Class:       "w-full",
										Required:    true,
										Placeholder: "Enter new password",
									})
								</div>
								<div>
									@label.Label(label.Props{For: "confirm-password-input", Class: "mb-2 font-semibold"}) {
										Confirm Password 
									}
									@input.Input(input.Props{
										ID:          "confirm-password-input",
										Name:        "confirm-password",
										Type:        input.TypePassword,
										Class:       "w-full",
										Required:    true,
										Placeholder: "Re-enter new password",
									})
								</div>
								@button.Button(button.Props{Type: "submit", Variant: button.VariantDefault, Class: "w-full"}) {
									Change Password
								}
							</form>
							@button.Button(button.Props{ID: "logout-btn", Variant: button.VariantDefault, Class: "w-full mt-6 text-red-600 border-red-600 hover:bg-red-50"}) {
								Log Out 
							}
						}
						@card.Card(card.Props{Class: "p-6 bg-muted/30 border border-border"}) {
							@card.Title(card.TitleProps{Class: "text-xl font-semibold text-primary mb-2"}) {
								Delete Account 
							}
							<p class="text-muted-foreground mb-4">This will permanently delete your account and all data. This action cannot be undone.</p>
							<div id="delete-confirm-section">
								@button.Button(button.Props{ID: "delete-btn", Variant: button.VariantDefault, Class: "w-full text-red-600 border-red-600 hover:bg-red-50"}) {
									Delete Account 
								}
							</div>
						}
					</section>
					<script>
let deleteConfirm = false;
let deletePassword = '';
let actualUsername = '';

function showError(id, msg) {
  let el = document.getElementById(id);
  if (!el) return;
  let err = el.parentElement.querySelector('.form-error');
  if (!err) {
    err = document.createElement('div');
    err.className = 'form-error text-destructive text-sm mt-1';
    el.parentElement.appendChild(err);
  }
  err.textContent = msg;
}
function clearError(id) {
  let el = document.getElementById(id);
  if (!el) return;
  let err = el.parentElement.querySelector('.form-error');
  if (err) err.textContent = '';
}

fetch('/api/auth/check', { credentials: 'include' })
  .then(r => r.ok ? r.json() : Promise.reject('Failed to check auth'))
  .then(data => {
    if (data && data.user) {
      document.getElementById('profile-info').innerHTML =
        (data.user.name ? `<div><b>Name:</b> ${data.user.name}</div>` : '');
      document.getElementById('username-input').value = data.user.nickname || data.user.name || '';
      document.getElementById('username-input').setAttribute('placeholder', data.user.nickname || data.user.name || '');
      actualUsername = data.user.nickname || data.user.name || '';
    } else {
      document.getElementById('profile-info').innerHTML = 'Not signed in.';
    }
  })
  .catch(() => {
    document.getElementById('profile-info').innerHTML = 'Failed to load profile.';
  });

document.getElementById('logout-btn').onclick = () => {
  window.location.href = '/api/auth/logout';
};

document.getElementById('update-profile-form').onsubmit = async (e) => {
  e.preventDefault();
  clearError('username-input');
  const username = document.getElementById('username-input').value;
  try {
    const res = await fetch('/api/user/profile', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ username })
    });
    if (res.ok) {
      document.getElementById('profile-info').innerHTML = 'Username updated!';
    } else {
      const err = await res.text();
      showError('username-input', err || 'Failed to update username.');
    }
  } catch {
    showError('username-input', 'Network error.');
  }
};

document.getElementById('delete-btn').onclick = async () => {
  clearError('delete-btn');
  const section = document.getElementById('delete-confirm-section');
  if (!deleteConfirm) {
    // Show password input for confirmation
    section.innerHTML = `
      <div class="mb-4">
        <label for="delete-password-input" class="block text-sm font-semibold mb-2">Enter your password to confirm:</label>
        <input id="delete-password-input" type="password" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Enter your password" autocomplete="off" />
      </div>
      <button id="final-delete-btn" class="w-full bg-red-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50" disabled>Confirm Delete</button>
      <div class="form-error text-destructive text-sm mt-1" style="display:none"></div>
      <button id="cancel-delete-btn" class="w-full mt-2 border border-border rounded py-2">Cancel</button>
    `;
    deleteConfirm = true;
    const input = document.getElementById('delete-password-input');
    const finalBtn = document.getElementById('final-delete-btn');
    const cancelBtn = document.getElementById('cancel-delete-btn');
    input.addEventListener('input', () => {
      finalBtn.disabled = input.value.length < 6;
    });
    finalBtn.onclick = async () => {
      finalBtn.disabled = true;
      finalBtn.textContent = 'Deleting...';
      try {
        const res = await fetch('/api/auth/delete', {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password: input.value })
        });
        if (res.ok) {
          window.location.href = '/';
        } else {
          const err = await res.text();
          finalBtn.disabled = false;
          finalBtn.textContent = 'Confirm Delete';
          const errDiv = section.querySelector('.form-error');
          errDiv.textContent = err || 'Failed to delete account. Password may be incorrect.';
          errDiv.style.display = '';
        }
      } catch {
        finalBtn.disabled = false;
        finalBtn.textContent = 'Confirm Delete';
        const errDiv = section.querySelector('.form-error');
        errDiv.textContent = 'Network error.';
        errDiv.style.display = '';
      }
    };
    cancelBtn.onclick = () => {
      section.innerHTML = `<button id=\"delete-btn\" class=\"w-full text-red-600 border-red-600 hover:bg-red-50\">Delete Account </button>`;
      document.getElementById('delete-btn').onclick = arguments.callee;
      deleteConfirm = false;
    };
    return;
  }
};

document.getElementById('change-password-form').onsubmit = async (e) => {
  e.preventDefault();
  clearError('password-input');
  clearError('confirm-password-input');
  const password = document.getElementById('password-input').value;
  const confirm = document.getElementById('confirm-password-input').value;
  if (password.length < 6) {
    showError('password-input', 'Password must be at least 6 characters.');
    return;
  }
  if (password !== confirm) {
    showError('confirm-password-input', 'Passwords do not match.');
    return;
  }
  try {
    const res = await fetch('/api/auth/change-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ password })
    });
    if (res.ok) {
      document.getElementById('profile-info').innerHTML = 'Password changed!';
    } else {
      const err = await res.text();
      showError('password-input', err || 'Failed to change password.');
    }
  } catch {
    showError('password-input', 'Network error.');
  }
};
					</script>
				}
			}
		</main>
	}
}
