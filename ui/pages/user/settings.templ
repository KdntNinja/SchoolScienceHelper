package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/components/card"
	"github.com/KdntNinja/ScratchClone/ui/components/input"
	"github.com/KdntNinja/ScratchClone/ui/components/label"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ Settings() {
	@layouts.BaseLayout() {
		<main class="flex flex-col items-center justify-start min-h-[calc(100vh-72px)] bg-background px-4 py-12 w-full">
			@card.Card(card.Props{Class: "bg-card dark:bg-card rounded-lg shadow-xl w-full max-w-6xl p-10 border border-border flex flex-col gap-8"}) {
				@card.Header(card.HeaderProps{Class: "border-b border-border pb-4 mb-4"}) {
					@card.Title(card.TitleProps{Class: "text-3xl font-extrabold text-left mb-1 text-primary tracking-tight"}) {
						Account Settings
					}
					@card.Description(card.DescriptionProps{Class: "text-left text-base text-muted-foreground"}) {
						Manage your profile, security, and preferences.
					}
				}
				@card.Content(card.ContentProps{Class: "w-full"}) {
					<div class="flex flex-row gap-8 w-full justify-center items-start" style="min-width:0;">
						<!-- Sidebar Navigation -->
						<nav class="w-56 flex-shrink-0 flex flex-col items-end pr-2">
							<ul class="flex flex-col gap-1 sticky top-24 w-full">
								<li><button type="button" class="settings-tab block w-full text-left px-4 py-2 rounded hover:bg-muted/60 font-medium text-primary transition" data-tab="profile">Profile</button></li>
								<li><button type="button" class="settings-tab block w-full text-left px-4 py-2 rounded hover:bg-muted/60 font-medium text-primary transition" data-tab="security">Security</button></li>
								<li><button type="button" class="settings-tab block w-full text-left px-4 py-2 rounded hover:bg-muted/60 font-medium text-primary transition" data-tab="preferences">Preferences</button></li>
								<li><button type="button" class="settings-tab block w-full text-left px-4 py-2 rounded hover:bg-destructive/10 font-medium text-destructive transition" data-tab="danger">Danger Zone</button></li>
							</ul>
						</nav>
						<!-- Tab Content Area -->
						<div class="flex-1 w-full flex flex-col gap-8 items-start justify-start">
							<div id="tab-profile" class="settings-tab-content w-full hidden">
								<div class="grid grid-cols-1 md:grid-cols-2 gap-6 w-full">
									<section class="flex flex-col gap-4 p-6 bg-muted/40 rounded-lg border border-border w-full shadow-md hover:shadow-lg transition-shadow">
										<h2 class="text-xl font-semibold text-primary mb-2">Profile</h2>
										<div class="flex flex-col gap-4">
											<div>
												<span class="block text-muted-foreground text-sm">Current Display Name</span>
												<span class="block font-medium text-lg" id="current-display-name"></span>
											</div>
											<div>
												<span class="block text-muted-foreground text-sm">Current Email</span>
												<span class="block font-medium text-lg" id="current-email"></span>
											</div>
										</div>
									</section>
									<section class="flex flex-col gap-4 p-6 bg-muted/40 rounded-lg border border-border w-full shadow-md hover:shadow-lg transition-shadow">
										<h2 class="text-xl font-semibold text-primary mb-2">Edit Profile</h2>
										<form class="flex flex-col gap-4 w-full" method="POST" action="/api/user/profile">
											@label.Label(label.Props{}) {
												New Display Name
											}
											@input.Input(input.Props{Type: "text", Name: "displayName", Placeholder: "Your display name", Class: "input input-bordered w-full"})
											@label.Label(label.Props{}) {
												New Email
											}
											@input.Input(input.Props{Type: "email", Name: "email", Placeholder: "you@email.com", Class: "input input-bordered w-full"})
											@button.Button(button.Props{Type: "submit", Class: "w-full mt-2", Variant: button.Variant("primary")}) {
												Save Profile
											}
										</form>
									</section>
								</div>
							</div>
							<div id="tab-security" class="settings-tab-content w-full hidden">
								<section class="flex flex-col gap-4 p-6 bg-muted/40 rounded-lg border border-border w-full shadow-md hover:shadow-lg transition-shadow">
									<h2 class="text-xl font-semibold text-primary mb-2">Security</h2>
									<form class="flex flex-col gap-4 w-full" method="POST" action="/api/user/password">
										@label.Label(label.Props{}) {
											New Password
										}
										@input.Input(input.Props{Type: "password", Name: "newPassword", Placeholder: "New password", Class: "input input-bordered w-full"})
										@label.Label(label.Props{}) {
											Confirm Password
										}
										@input.Input(input.Props{Type: "password", Name: "confirmPassword", Placeholder: "Confirm password", Class: "input input-bordered w-full"})
										@button.Button(button.Props{Type: "submit", Class: "w-full mt-2", Variant: button.Variant("primary")}) {
											Change Password
										}
									</form>
								</section>
							</div>
							<div id="tab-preferences" class="settings-tab-content w-full hidden">
								<section class="flex flex-col gap-4 p-6 bg-muted/40 rounded-lg border border-border w-full shadow-md hover:shadow-lg transition-shadow">
									<h2 class="text-xl font-semibold text-primary mb-2">Preferences</h2>
									<form class="flex flex-col gap-4 w-full" method="POST" action="/api/user/preferences">
										@label.Label(label.Props{}) {
											Theme
										}
										<select name="theme" class="input input-bordered w-full" id="theme-select">
											<option value="system">System</option>
											<option value="light">Light</option>
											<option value="dark">Dark</option>
										</select>
										@button.Button(button.Props{Type: "submit", Class: "w-full mt-2", Variant: button.Variant("primary")}) {
											Save Preferences
										}
									</form>
								</section>
							</div>
							<div id="tab-danger" class="settings-tab-content w-full hidden">
								<section class="flex flex-col gap-4 p-6 bg-destructive/10 rounded-lg border border-destructive w-full shadow-md hover:shadow-lg transition-shadow">
									<h2 class="text-xl font-semibold text-destructive mb-2">Danger Zone</h2>
									<form class="flex flex-col gap-4 w-full" method="POST" action="/api/user/delete" onsubmit="return confirm('Are you sure you want to delete your account? This action cannot be undone.');">
										@button.Button(button.Props{Type: "submit", Class: "w-full mt-2", Variant: button.Variant("destructive")}) {
											Delete Account
										}
									</form>
								</section>
							</div>
						</div>
					</div>
					<script>
document.addEventListener("DOMContentLoaded", () => {
	const tabButtons = document.querySelectorAll('.settings-tab');
	const tabContents = document.querySelectorAll('.settings-tab-content');
	tabButtons.forEach(btn => {
		btn.addEventListener('click', () => {
			tabButtons.forEach(b => b.classList.remove('bg-muted', 'font-bold'));
			tabContents.forEach(c => c.classList.add('hidden'));
			btn.classList.add('bg-muted', 'font-bold');
			document.getElementById('tab-' + btn.dataset.tab).classList.remove('hidden');
		});
	});
	tabButtons[0].classList.add('bg-muted', 'font-bold');
	tabContents[0].classList.remove('hidden');

	fetch("/api/user/profile")
		.then(resp => resp.ok ? resp.json() : null)
		.then(data => {
			if (data) {
				document.getElementById("current-display-name").textContent = data.displayName;
				document.getElementById("current-email").textContent = data.email;
				const displayNameInput = document.querySelector('input[name="displayName"]');
				const emailInput = document.querySelector('input[name="email"]');
				if (displayNameInput) displayNameInput.value = data.displayName;
				if (emailInput) emailInput.value = data.email;
			}
		});

	fetch("/api/user/preferences")
		.then(resp => resp.ok ? resp.json() : null)
		.then(data => {
			if (data && data.theme) {
				const themeSelect = document.getElementById("theme-select");
				if (themeSelect) themeSelect.value = data.theme;
			}
		});
});
					</script>
				}
			}
		</main>
	}
}
