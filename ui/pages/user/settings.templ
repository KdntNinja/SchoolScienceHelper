package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/components/card"
	"github.com/KdntNinja/ScratchClone/ui/components/input"
	"github.com/KdntNinja/ScratchClone/ui/components/label"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ Settings() {
	@layouts.BaseLayout() {
		<main class="flex flex-col items-center min-h-[calc(100vh-72px)] bg-background px-4 py-12">
			@card.Card(card.Props{Class: "max-w-2xl w-full py-12 px-6 bg-background text-foreground rounded-xl shadow-lg border border-border"}) {
				@card.Header(card.HeaderProps{}) {
					@card.Title(card.TitleProps{Class: "text-3xl font-bold mb-2 text-primary"}) { Account Settings }
					@card.Description(card.DescriptionProps{Class: "mb-6 text-muted-foreground"}) { Manage your profile, preferences, and account. }
				}
				@card.Content(card.ContentProps{}) {
					<!-- Profile Section -->
					<section class="mb-10">
						<h2 class="text-xl font-semibold mb-4 border-b border-border pb-2">Profile</h2>
						<form id="profile-form" method="post" action="/api/user/profile" class="space-y-6">
							<div class="flex flex-col gap-1">
								@label.Label(label.Props{For: "username", Class: "font-medium"}) { Username }
								@input.Input(input.Props{ID: "username", Name: "username", Type: input.TypeText, Required: true, Class: "input input-bordered w-full"})
							</div>
							<div class="flex justify-end">
								@button.Button(button.Props{Type: "submit", Class: "btn btn-primary"}) { Save Profile }
							</div>
						</form>
					</section>

					<!-- Preferences Section -->
					<section class="mb-10">
						<h2 class="text-xl font-semibold mb-4 border-b border-border pb-2">Preferences</h2>
						<form id="preferences-form" method="post" action="/api/user/preferences" class="space-y-6">
							<div class="flex flex-col gap-1">
								@label.Label(label.Props{For: "theme", Class: "font-medium"}) { Theme }
								<select id="theme" name="theme" class="select select-bordered w-full">
									<option value="light">Light</option>
									<option value="dark">Dark</option>
									<option value="system">System</option>
								</select>
							</div>
							<div class="flex justify-end">
								@button.Button(button.Props{Type: "submit", Class: "btn btn-primary"}) { Save Preferences }
							</div>
						</form>
						<script>
						document.addEventListener('DOMContentLoaded', function() {
							fetch('/api/user/preferences', { credentials: 'include' })
								.then(r => r.ok ? r.json() : null)
								.then(prefs => {
									if (!prefs) return;
									const themeSel = document.getElementById('theme');
									if (themeSel && prefs.theme) {
										themeSel.value = prefs.theme;
										if (prefs.theme === 'dark' || prefs.theme === 'light') {
											localStorage.setItem('appTheme', prefs.theme);
											document.documentElement.classList.toggle('dark', prefs.theme === 'dark');
										} else {
											localStorage.removeItem('appTheme');
											document.documentElement.classList.add('dark');
										}
									}
								});

							const themeSel = document.getElementById('theme');
							if (themeSel) {
								themeSel.addEventListener('change', function() {
									const val = themeSel.value;
									if (val === 'dark' || val === 'light') {
										localStorage.setItem('appTheme', val);
										document.documentElement.classList.toggle('dark', val === 'dark');
									} else {
										localStorage.removeItem('appTheme');
										document.documentElement.classList.add('dark');
									}
									if (window.Alpine && Alpine.store && Alpine.store('themeHandler')) {
										Alpine.store('themeHandler').isDark = (val === 'dark');
									}
								});
							}
						});
						</script>
					</section>

					<!-- Security Section -->
					<section class="mb-10">
						<h2 class="text-xl font-semibold mb-4 border-b border-border pb-2">Security</h2>
						<div class="mb-4">
							<p class="mb-2">Authentication is managed via Google. To change your password or manage your account, use your Google Account settings.</p>
							@button.Button(button.Props{
								Href: "https://myaccount.google.com/security",
								Class: "btn btn-secondary",
								Target: "_blank"
							}) { Manage Google Account }
						</div>
					</section>

					<!-- Danger Zone -->
					<section>
						<h2 class="text-xl font-semibold mb-4 text-red-600 border-b border-border pb-2">Danger Zone</h2>
						<form id="delete-account-form" method="post" action="/api/user/delete"
							onsubmit="return confirm('Are you sure you want to delete your account? This action cannot be undone.');">
							@button.Button(button.Props{Type: "submit", Class: "btn btn-error"}) { Delete Account }
						</form>
					</section>
				}
			}
		</main>
	}
}