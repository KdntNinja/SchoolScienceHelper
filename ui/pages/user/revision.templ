package pages

import (
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/label"
	"KdnSite/ui/components/selectbox"
	"KdnSite/ui/components/textarea"
	"KdnSite/ui/layouts"
)

templ Revision() {
	@layouts.BaseLayout() {
		@card.Card(card.Props{Class: "w-full max-w-3xl mx-auto p-8 mt-12"}) {
			@card.Header(card.HeaderProps{}) {
				@card.Title(card.TitleProps{Class: "text-3xl font-bold mb-6 text-primary"}) {
					Revision
				}
			}
			@card.Content(card.ContentProps{}) {
				<main>
					<!-- Removed Anki-related tabs and UI. Only show Revision Resources section. -->
					<div class="mb-6 flex flex-col md:flex-row gap-4 items-center">
						<form id="add-revision-form" class="flex flex-col md:flex-row gap-2 w-full md:items-end">
							<div class="flex flex-col flex-1">
								@label.Label(label.Props{For: "type-input", Class: "font-semibold mb-1"}) {
									Type 
								}
								@selectbox.SelectBox(selectbox.Props{
									ID:    "type-input",
									Class: "border rounded px-3 py-2 bg-background text-foreground",
								}) {
									@selectbox.Item(selectbox.ItemProps{Value: "flashcard"}) {
										Flashcard 
									}
									@selectbox.Item(selectbox.ItemProps{Value: "note"}) {
										Note 
									}
									@selectbox.Item(selectbox.ItemProps{Value: "summary"}) {
										Summary 
									}
								}
							</div>
							<div class="flex flex-col flex-1">
								@label.Label(label.Props{For: "topic-input", Class: "font-semibold mb-1"}) {
									Topic 
								}
								@input.Input(input.Props{
									ID:          "topic-input",
									Type:        input.TypeText,
									Class:       "border rounded px-3 py-2 bg-background text-foreground",
									Placeholder: "e.g. Cell Biology",
								})
							</div>
							<div class="flex flex-col flex-1">
								@label.Label(label.Props{For: "content-input", Class: "font-semibold mb-1"}) {
									Content 
								}
								@textarea.Textarea(textarea.Props{
									ID:          "content-input",
									Class:       "border rounded px-3 py-2 bg-background text-foreground",
									Placeholder: "Enter content here...",
								})
							</div>
							@button.Button(button.Props{Type: "submit", Variant: button.VariantDefault, Class: "px-4 py-2"}) {
								Add
							}
						</form>
					</div>
					<ul id="revision-list" class="grid grid-cols-1 md:grid-cols-2 gap-6"></ul>
				</main>
			}
		}
		<script>
		// Helper to get token and build headers
		function getAuthHeaders(extraHeaders = {}) {
		  const token = localStorage.getItem('token');
		  return token ? { ...extraHeaders, 'Authorization': `Bearer ${token}` } : extraHeaders;
		}
		// Existing Revision Resource JS
		async function loadRevisionResources() {
  const res = await fetch('/api/revision', { credentials: 'include', headers: getAuthHeaders() });
  let resources = [];
  try { resources = await res.json(); } catch { resources = []; }
  if (!Array.isArray(resources)) resources = [];
  const list = document.getElementById('revision-list');
  if (!resources.length) {
    list.innerHTML = '<li class="col-span-2 text-center text-muted-foreground">No revision resources yet.</li>';
    return;
  }
  let html = '';
  for (const r of resources) {
    html += `<li class='bg-muted/40 rounded-xl p-6 flex flex-col gap-2'>`;
    html += `<span class='font-semibold text-lg'>${r.type.charAt(0).toUpperCase() + r.type.slice(1)}</span>`;
    html += `<span class='text-muted-foreground'>`;
    if (r.topic) html += `<b>Topic:</b> ${r.topic}<br>`;
    html += `${r.content}</span>`;
    html += `</li>`;
  }
  list.innerHTML = html;
}
		loadRevisionResources();
		document.getElementById('add-revision-form').onsubmit = async function(e) {
			e.preventDefault();
			const type = document.getElementById('type-input').value;
			const topic = document.getElementById('topic-input').value;
			const content = document.getElementById('content-input').value;
			if (!type || !content) return;
			await fetch('/api/revision', {
				method: 'POST',
				headers: getAuthHeaders({ 'Content-Type': 'application/json' }),
				credentials: 'include',
				body: JSON.stringify({ type, topic, content })
			});
			document.getElementById('content-input').value = '';
			loadRevisionResources();
		};
		</script>
	}
}
