package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/components/card"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ Dash() {
	@layouts.BaseLayout() {
		<main class="flex flex-col items-center justify-center min-h-[calc(100vh-72px)] bg-background px-4 py-12 relative">
			@card.Card(card.Props{Class: "bg-card dark:bg-card rounded-lg shadow-xl w-full max-w-2xl p-10 border border-border flex flex-col gap-8"}) {
				@card.Header(card.HeaderProps{}) {
					@card.Title(card.TitleProps{Class: "text-4xl font-extrabold text-center mb-4 text-primary tracking-tight"}) {
						Your Projects
					}
					@card.Description(card.DescriptionProps{Class: "text-center text-lg text-muted-foreground mb-8"}) {
						Welcome to your dashboard! Here you can manage your Scratch-like projects, create new ones, and explore your creative coding journey.
					}
				}
				@card.Content(card.ContentProps{}) {
					<div class="flex flex-col md:flex-row gap-8">
						<!-- Project List -->
						@card.Card(card.Props{Class: "flex-1"}) {
							@card.Header(card.HeaderProps{}) {
								@card.Title(card.TitleProps{Class: "text-xl font-semibold mb-2"}) {
									My Projects
								}
							}
							@card.Content(card.ContentProps{}) {
								<ul id="project-list" class="space-y-3">
									<li class="text-muted-foreground text-center" id="project-list-empty">Loading...</li>
								</ul>
								@button.Button(button.Props{ID: "new-project-btn", Class: "mt-6 w-full flex items-center justify-center gap-2 text-lg font-semibold py-3 px-6 rounded-lg bg-gradient-to-r from-primary to-blue-500 hover:from-blue-500 hover:to-primary shadow-lg transition-all duration-200", Variant: button.Variant("primary")}) {
									<span>New Project</span>
								}
							}
						}
						<!-- Recent Activity -->
						@card.Card(card.Props{Class: "flex-1"}) {
							@card.Header(card.HeaderProps{}) {
								@card.Title(card.TitleProps{Class: "text-xl font-semibold mb-2"}) {
									Recent Activity
								}
							}
							@card.Content(card.ContentProps{}) {
								<ul id="recent-activity-list" class="space-y-3 text-sm">
									<li class="text-muted-foreground text-center" id="recent-activity-empty">Loading...</li>
								</ul>
							}
						}
					</div>
				}
			}
			<!-- Settings Floating Button -->
			@button.Button(button.Props{Href: "/settings", Class: "fixed bottom-8 right-8 z-40 bg-card border border-border shadow-lg rounded-full p-4 flex items-center justify-center hover:bg-primary/10 transition group", Attributes: templ.Attributes{"title": "Settings"}}) {
				Settings
			}
			<script>
				// dash.js - handles dashboard project and activity rendering
				fetch('/api/project/list', { credentials: 'include' })
					.then(r => r.ok ? r.json() : [])
					.then(projects => {
						const list = document.getElementById('project-list');
						const empty = document.getElementById('project-list-empty');
						if (empty) empty.remove();
						if (!projects || projects.length === 0) {
							list.innerHTML = '<li class="text-muted-foreground text-center">No projects yet. Click "New Project" to get started!</li>';
							return;
						}
						list.innerHTML = '';
						for (const p of projects) {
							const href = p.public_id ? `/project/${p.public_id}` : '#';
							const li = document.createElement('li');
							li.className = 'bg-muted rounded-md p-4 flex items-center justify-between';
							li.innerHTML = `<span class='font-medium'></span><a class='text-primary hover:underline text-sm' href='${href}'>Open</a>`;
							li.querySelector('span').textContent = p.name;
							list.appendChild(li);
						}

						// Render recent activity (sorted by updated_at desc)
						const activityList = document.getElementById('recent-activity-list');
						const activityEmpty = document.getElementById('recent-activity-empty');
						if (activityEmpty) activityEmpty.remove();
						if (!projects || projects.length === 0) {
							activityList.innerHTML = '<li class="text-muted-foreground text-center">No recent activity.</li>';
							return;
						}
						// Sort by updated_at descending
						projects.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
						for (const p of projects.slice(0, 5)) {
							const date = new Date(p.updated_at);
							const ago = timeAgo(date);
							const li = document.createElement('li');
							li.innerHTML = `Edited <span class='font-medium text-primary'></span> ${ago}`;
							li.querySelector('span').textContent = p.name;
							activityList.appendChild(li);
						}
					})
					.catch(() => {
						const list = document.getElementById('project-list');
						list.innerHTML = '<li class="text-muted-foreground text-center">Failed to load projects.</li>';
						const activityList = document.getElementById('recent-activity-list');
						activityList.innerHTML = '<li class="text-muted-foreground text-center">Failed to load activity.</li>';
					});

				// Helper: time ago formatting
				function timeAgo(date) {
					const now = new Date();
					const seconds = Math.floor((now - date) / 1000);
					if (seconds < 60) return `${seconds}s ago`;
					const minutes = Math.floor(seconds / 60);
					if (minutes < 60) return `${minutes}m ago`;
					const hours = Math.floor(minutes / 60);
					if (hours < 24) return `${hours}h ago`;
					const days = Math.floor(hours / 24);
					if (days < 7) return `${days}d ago`;
					return date.toLocaleDateString();
				}

				// New Project button: go to /newproject
				const btn = document.getElementById("new-project-btn");
				if (btn) {
					btn.addEventListener("mouseenter", function() {
						btn.classList.add("ring-2", "ring-primary", "scale-105");
					});
					btn.addEventListener("mouseleave", function() {
						btn.classList.remove("ring-2", "ring-primary", "scale-105");
					});
					btn.addEventListener("click", function(e) {
						e.preventDefault();
						window.location.href = "/newproject";
					});
				}
			</script>
		</main>
	}
}
