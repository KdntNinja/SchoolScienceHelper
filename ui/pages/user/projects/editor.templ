package projects

import (
	"KdnSite/ui/components/button"
	"KdnSite/ui/components/card"
	"KdnSite/ui/components/input"
	"KdnSite/ui/components/label"
	"KdnSite/ui/components/textarea"
	"KdnSite/ui/layouts"
)

templ ProjectEditor() {
	@layouts.BaseLayout() {
		<main class="container mx-auto py-12 max-w-xl">
			@card.Card(card.Props{Class: "w-full p-8"}) {
				@card.Header(card.HeaderProps{}) {
					@card.Title(card.TitleProps{Class: "text-3xl font-bold mb-6 text-primary"}) {
						New Project 
					}
				}
				@card.Content(card.ContentProps{}) {
					<form id="project-form" class="space-y-6">
						<div>
							@label.Label(label.Props{For: "project-title", Class: "block mb-2 font-semibold"}) {
								Title 
							}
							@input.Input(input.Props{
								ID:          "project-title",
								Name:        "title",
								Type:        input.TypeText,
								Class:       "w-full",
								Required:    true,
								Placeholder: "Project Title",
							})
						</div>
						<div>
							@label.Label(label.Props{For: "project-data", Class: "block mb-2 font-semibold"}) {
								Data (JSON) 
							}
							@textarea.Textarea(textarea.Props{
								ID:          "project-data",
								Name:        "data",
								Class:       "w-full h-32",
								Required:    true,
								Placeholder: "{\n  \"key\": \"value\"\n}",
							})
						</div>
						@button.Button(button.Props{Type: "submit", Variant: button.VariantDefault}) {
							Create Project 
						}
					</form>
					<script>
						document.getElementById('project-form').onsubmit = async function(e) {
							e.preventDefault();
							const form = e.target;
							const res = await fetch('/api/projects', {
								method: 'POST',
								headers: getAuthHeaders({ 'Content-Type': 'application/json' }),
								body: JSON.stringify({ Title: form.title.value, Data: form.data.value })
							});
							if (res.ok) {
								window.location.href = '/user/projects/list';
							} else {
								alert('Failed to create project');
							}
						};
						// Helper to get token and build headers
						function getAuthHeaders(extraHeaders = {}) {
						  const token = localStorage.getItem('token');
						  return token ? { ...extraHeaders, 'Authorization': `Bearer ${token}` } : extraHeaders;
						}
					</script>
				}
			}
		</main>
	}
}
