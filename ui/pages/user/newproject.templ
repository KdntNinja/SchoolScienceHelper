package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/components/input"
	"github.com/KdntNinja/ScratchClone/ui/components/label"
	"github.com/KdntNinja/ScratchClone/ui/components/textarea"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ NewProject() {
	@layouts.BaseLayout() {
		<main class="flex items-center justify-center min-h-[calc(100vh-72px)] bg-background px-4 py-12">
			<div class="bg-card dark:bg-card rounded-xl shadow-xl w-full max-w-lg p-10 border border-border flex flex-col items-center animate-fade-in">
				<h2 class="text-4xl font-bold text-center mb-6 text-primary">Create a New Project</h2>
				<p class="mb-8 text-center text-muted-foreground text-lg">Start building something amazing. Just give your project a name and optional description.</p>
				<form
					id="new-project-form"
					autocomplete="off"
					class="flex flex-col gap-5 w-full max-w-md mx-auto"
				>
					<!-- Project Name -->
					<div class="flex flex-col gap-2">
						@label.Label(label.Props{
							For:   "project-name",
							Class: "text-base font-semibold text-primary",
						}) {
							Project Name <span class="text-destructive">*</span>
						}
						@input.Input(input.Props{
							ID:          "project-name",
							Name:        "name",
							Type:        input.TypeText,
							Required:    true,
							Class:       "px-5 py-4 text-lg rounded-xl border border-border bg-background/90 placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition",
							Placeholder: "E.g. My First Game",
							Attributes:  templ.Attributes{"maxlength": "64", "autofocus": "autofocus"},
						})
					</div>
					<!-- Description -->
					<div class="flex flex-col gap-2">
						@label.Label(label.Props{
							For:   "project-desc",
							Class: "text-base font-semibold text-primary",
						}) {
							Description
						}
						@textarea.Textarea(textarea.Props{
							ID:          "project-desc",
							Name:        "description",
							Class:       "px-5 py-4 text-lg min-h-[112px] rounded-xl border border-border bg-background/90 placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition",
							Placeholder: "A short description of your project (optional)",
							Attributes:  templ.Attributes{"maxlength": "256"},
						})
					</div>
					<!-- Error Box -->
					<div id="project-error" class="hidden text-destructive bg-destructive/10 border border-destructive rounded-lg px-4 py-3 text-base font-semibold mb-2"></div>
					<!-- Actions -->
					<div class="flex flex-col sm:flex-row gap-4 mt-6">
						@button.Button(button.Props{
							Type:       "submit",
							Class:      "flex-1 py-3 text-lg font-bold rounded-lg bg-gradient-to-br from-primary to-blue-500 hover:brightness-110 shadow flex items-center justify-center gap-2 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 active:scale-95",
							Attributes: templ.Attributes{"aria-label": "Create Project"},
						}) {
							<span>Create Project</span>
						}
						@button.Button(button.Props{
							Type:       "button",
							Class:      "flex-1 py-3 text-lg font-medium rounded-lg bg-muted hover:bg-muted/70 border border-border flex items-center justify-center gap-2 transition-all duration-200",
							Attributes: templ.Attributes{"onclick": "window.history.back()"},
						}) {
							<span>Cancel</span>
						}
					</div>
				</form>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const form = document.getElementById("new-project-form");
    const errorBox = document.getElementById("project-error");
    if (form) {
        form.addEventListener("submit", async function(e) {
            e.preventDefault();
            if (errorBox) {
                errorBox.classList.add("hidden");
                errorBox.textContent = "";
            }
            const name = form.querySelector('[name="name"]').value;
            const description = form.querySelector('[name="description"]').value;
            const payload = { name, data: {}, description };
            const res = await fetch("/api/project/save", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });
            if (res.ok) {
                window.location.href = "/dash";
            } else {
                let msg = "Failed to create project.";
                try {
                    msg = await res.text();
                } catch {}
                if (errorBox) {
                    errorBox.textContent = msg;
                    errorBox.classList.remove("hidden");
                }
            }
        });
    }
});
</script>
			</div>
		</main>
	}
}
