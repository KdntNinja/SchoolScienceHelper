package pages

import "github.com/KdntNinja/ScratchClone/ui/layouts"

templ Dash() {
	@layouts.BaseLayout() {
		<main class="flex flex-col items-center justify-center min-h-[calc(100vh-72px)] bg-background px-4 py-12 relative">
			<div class="bg-card dark:bg-card rounded-lg shadow-xl w-full max-w-2xl p-10 border border-border flex flex-col gap-8">
				<h2 class="text-4xl font-extrabold text-center mb-4 text-primary tracking-tight">Your Projects</h2>
				<p class="text-center text-lg text-muted-foreground mb-8">Welcome to your dashboard! Here you can manage your Scratch-like projects, create new ones, and explore your creative coding journey.</p>
				<div class="flex flex-col md:flex-row gap-8">
					<!-- Project List -->
					<div class="flex-1">
						<h3 class="text-xl font-semibold mb-2">My Projects</h3>
						<ul id="project-list" class="space-y-3">
							<li class="text-muted-foreground text-center" id="project-list-empty">Loading...</li>
						</ul>
						<button
							id="new-project-btn"
							class="mt-6 w-full bg-primary text-white rounded-md py-2 font-semibold transition"
							@tw="hover:bg-primary-foreground hover:text-black"
						>+ New Project</button>
					</div>
					<!-- Recent Activity -->
					<div class="flex-1">
						<h3 class="text-xl font-semibold mb-2">Recent Activity</h3>
						<ul id="recent-activity-list" class="space-y-3 text-sm">
							<li class="text-muted-foreground text-center" id="recent-activity-empty">Loading...</li>
						</ul>
					</div>
				</div>
			</div>
			<!-- Settings Floating Button -->
			<a href="/settings" class="fixed bottom-8 right-8 z-40 bg-card border border-border shadow-lg rounded-full p-4 flex items-center justify-center hover:bg-primary/10 transition group" title="Settings">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-muted-foreground group-hover:text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
					<path stroke-linecap="round" stroke-linejoin="round" d="M11.25 2.25c.966 0 1.75.784 1.75 1.75v.5a7.5 7.5 0 0 1 2.25.75l.35-.35a1.75 1.75 0 1 1 2.475 2.475l-.35.35a7.5 7.5 0 0 1 .75 2.25h.5a1.75 1.75 0 1 1 0 3.5h-.5a7.5 7.5 0 0 1-.75 2.25l.35.35a1.75 1.75 0 1 1-2.475 2.475l-.35-.35a7.5 7.5 0 0 1-2.25.75v.5a1.75 1.75 0 1 1-3.5 0v-.5a7.5 7.5 0 0 1-2.25-.75l-.35.35a1.75 1.75 0 1 1-2.475-2.475l.35-.35a7.5 7.5 0 0 1-.75-2.25h-.5a1.75 1.75 0 1 1 0-3.5h.5a7.5 7.5 0 0 1 .75-2.25l-.35-.35A1.75 1.75 0 1 1 6.1 4.15l.35.35a7.5 7.5 0 0 1 2.25-.75v-.5c0-.966.784-1.75 1.75-1.75zM12 8.25a3.75 3.75 0 1 0 0 7.5 3.75 3.75 0 0 0 0-7.5z"></path>
				</svg>
			</a>
			<script>
			// Fetch and render projects client-side
			fetch('/api/project/list', { credentials: 'include' })
				.then(r => r.ok ? r.json() : [])
				.then(projects => {
					const list = document.getElementById('project-list');
					const empty = document.getElementById('project-list-empty');
					if (empty) empty.remove();
					if (!projects || projects.length === 0) {
						list.innerHTML = '<li class="text-muted-foreground text-center">No projects yet. Click "+ New Project" to get started!</li>';
						return;
					}
					list.innerHTML = '';
					for (const p of projects) {
						const href = p.public_id ? `/project/${p.public_id}` : '#';
						const li = document.createElement('li');
						li.className = 'bg-muted rounded-md p-4 flex items-center justify-between';
						li.innerHTML = `<span class='font-medium'></span><a class='text-primary hover:underline text-sm' href='${href}'>Open</a>`;
						li.querySelector('span').textContent = p.name;
						list.appendChild(li);
					}

					// Render recent activity (sorted by updated_at desc)
					const activityList = document.getElementById('recent-activity-list');
					const activityEmpty = document.getElementById('recent-activity-empty');
					if (activityEmpty) activityEmpty.remove();
					if (!projects || projects.length === 0) {
						activityList.innerHTML = '<li class="text-muted-foreground text-center">No recent activity.</li>';
						return;
					}
					// Sort by updated_at descending
					projects.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
					for (const p of projects.slice(0, 5)) {
						const date = new Date(p.updated_at);
						const ago = timeAgo(date);
						const li = document.createElement('li');
						li.innerHTML = `Edited <span class='font-medium text-primary'></span> ${ago}`;
						li.querySelector('span').textContent = p.name;
						activityList.appendChild(li);
					}
				})
				.catch(() => {
					const list = document.getElementById('project-list');
					list.innerHTML = '<li class="text-muted-foreground text-center">Failed to load projects.</li>';
					const activityList = document.getElementById('recent-activity-list');
					activityList.innerHTML = '<li class="text-muted-foreground text-center">Failed to load activity.</li>';
				});

			// New project button handler
			document.getElementById('new-project-btn').addEventListener('click', async () => {
	const name = prompt('Enter a name for your new project:');
	if (!name) return;
	const res = await fetch('/api/project/save', {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		credentials: 'include',
		body: JSON.stringify({ name, data: {} })
	});
	if (res.ok) {
		location.reload();
	} else {
		alert('Failed to create project.');
	}
});

			// Helper: time ago formatting
			function timeAgo(date) {
				const now = new Date();
				const seconds = Math.floor((now - date) / 1000);
				if (seconds < 60) return `${seconds}s ago`;
				const minutes = Math.floor(seconds / 60);
				if (minutes < 60) return `${minutes}m ago`;
				const hours = Math.floor(minutes / 60);
				if (hours < 24) return `${hours}h ago`;
				const days = Math.floor(hours / 24);
				if (days < 7) return `${days}d ago`;
				return date.toLocaleDateString();
			}
			</script>
		</main>
	}
}
