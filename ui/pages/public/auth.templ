package pages

import (
	"github.com/KdntNinja/ScratchClone/ui/components/button"
	"github.com/KdntNinja/ScratchClone/ui/layouts"
)

templ Auth() {
	@layouts.BaseLayout() {
		<main class="flex items-center justify-center min-h-[calc(100vh-72px)] bg-background px-4 py-12">
			<div class="bg-card dark:bg-card rounded-lg shadow-xl w-full max-w-md p-8 border border-border flex flex-col items-center">
				<h2 class="text-3xl font-bold text-center mb-6 text-primary">Welcome</h2>
				<p class="mb-8 text-center text-muted-foreground">Sign in or sign up securely using our trusted authentication provider.</p>
				@button.Button(button.Props{
					ID:    "auth-external-btn",
					Class: "w-full flex items-center justify-center gap-3 rounded-lg px-4 py-3 bg-white text-[#3c4043] font-medium text-base shadow border border-[#dadce0] hover:shadow-md focus:outline-none focus:ring-2 focus:ring-[#4285F4] focus:ring-offset-2 transition-all min-h-[48px] min-w-[220px]",
				}) {
					<img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/google/google-original.svg" alt="Google Logo" class="h-6 w-6 flex-shrink-0" style="width:24px;height:24px;object-fit:contain;background:transparent;"/>
					<span class="font-medium dark:text-[#3c4043]">Sign in with Google</span>
				}
				<p class="mt-6 text-xs text-muted-foreground text-center">
					By continuing, you agree to our
					<a href="/terms" class="text-primary hover:underline">Terms & Conditions</a>
					and
					<a href="/privacy" class="text-primary hover:underline">Privacy Policy</a>.
				</p>
			</div>
		</main>
		<script>
			// Helper: parse hash params
			function parseHashParams(hash) {
			  const params = {};
			  hash.replace(/^#/, '').split('&').forEach(kv => {
				const [k, v] = kv.split('=');
				if (k) params[k] = decodeURIComponent(v || '');
			  });
			  return params;
			}

			// On page load, check for Auth0 token in hash
			(function() {
			  const hashParams = parseHashParams(window.location.hash);
			  if (hashParams.access_token) {
				// Store token (choose localStorage or sessionStorage as needed)
				localStorage.setItem('auth0_id_token', hashParams.access_token);
				// Clear the hash from the URL
				window.location.hash = '';
				// Only redirect if not already on /dash
				if (!window.location.pathname.startsWith('/dash')) {
				  window.location.replace('/dash');
				}
				return;
			  }

			  // Fetch Auth0 config and handle auto-redirect if already authenticated
			  fetch('/config')
				.then(res => res.json())
				.then(cfg => {
				  window.AUTH0_DOMAIN = cfg.AUTH0_DOMAIN;
				  window.AUTH0_CLIENT_ID = cfg.AUTH0_CLIENT_ID;
				  // Only redirect if token is present and not already on /dash or /auth
				  if ((localStorage.getItem('auth0_id_token') || sessionStorage.getItem('auth0_id_token')) && !window.location.pathname.startsWith('/dash') && !window.location.pathname.startsWith('/auth')) {
					window.location.replace('/dash');
				  }
				});
			})();

			document.getElementById('auth-external-btn').onclick = () => {
			  const domain = window.AUTH0_DOMAIN;
			  const clientId = window.AUTH0_CLIENT_ID;
			  const redirectUri = window.location.origin + '/dash';
			  window.location.href = `https://${domain}/authorize?response_type=token&client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&connection=google-oauth2`;
			};
		</script>
	}
}
